<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://garymm.org/feed.xml" rel="self" type="application/atom+xml" /><link href="http://garymm.org/" rel="alternate" type="text/html" /><updated>2025-03-03T16:38:42-08:00</updated><id>http://garymm.org/feed.xml</id><entry><title type="html">Earl: a framework for scalable reinforcement learning research</title><link href="http://garymm.org/blog/2025/03/03/earl/" rel="alternate" type="text/html" title="Earl: a framework for scalable reinforcement learning research" /><published>2025-03-03T00:00:00-08:00</published><updated>2025-03-03T00:00:00-08:00</updated><id>http://garymm.org/blog/2025/03/03/earl</id><content type="html" xml:base="http://garymm.org/blog/2025/03/03/earl/">&lt;p&gt;In this post I will briefly describe &lt;a href=&quot;https://github.com/garymm/earl&quot;&gt;Earl&lt;/a&gt;, a reinforcement learning (RL) framework I wrote that enables scalable distributed training across multiple devices, and discuss some of the things I learned along the way.&lt;/p&gt;

&lt;p&gt;Earl implements the two architectures described in “&lt;a href=&quot;https://arxiv.org/abs/2104.06272&quot;&gt;Podracer architectures for scalable Reinforcement Learning&lt;/a&gt;”, which were used at DeepMind to scale training to very large batch sizes across many chips. Note these are not neural network architectures, but distributed RL architectures that can be used to train models that internally may use any neural network architecture. To prove it is usable, I used Earl to &lt;a href=&quot;https://github.com/garymm/earl/tree/master/earl/agents/r2d2&quot;&gt;implement the R2D2&lt;/a&gt; algorithm as described in another DeepMind paper “&lt;a href=&quot;https://openreview.net/forum?id=r1lyTjAqYX&quot;&gt;Recurrent Experience Replay In Distributed Reinforcement Learning&lt;/a&gt;”.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;To provide context, I’ll briefly summarize the Podracer architectures paper. If you know it, feel free to skip this.&lt;/p&gt;

&lt;p&gt;In contrast to other machine learning paradigms, online RL involves an agent and an environment, and the training data is generated on the fly from their interactions. The paper describes two architectures: Anakin and Sebulba&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Anakin is used when an environment is compatible with jax.jit, and Sebulba is used otherwise. In both of the architectures, the agent is implemented in JAX and is compatible with jax.jit. If you’re not familiar with JAX, see &lt;a href=&quot;https://www.garymm.org/blog/2024/09/08/jaxwhat/&quot;&gt;my introduction&lt;/a&gt;. Basically, code that is run under jax.jit is optimized by a compiler and run on any supported device (e.g. GPU) without further involving the Python interpreter.&lt;/p&gt;

&lt;p&gt;In Anakin, one can have the entire training loop (agent + environment interaction, loss function and optimization) happen under jax.jit and thus run on a device (e.g. GPU) without going back to the Python interpreter. In terms of writing a performant training loop, in some ways this is even easier to deal with than normal (supervised) machine learning since one does not need to copy any data from the host to the accelerator. Scaling this across multiple devices is trivial using JAX.&lt;/p&gt;

&lt;p&gt;Below is a figure I created that is analogous to the paper’s figure 3 (see below) that illustrates Anakin-style RL. Notice that there is nothing running on the CPU! This figure may be misleading because the arrows don’t necessarily signify data being copied. It’s just data that is produced by one function being an argument to another function.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2025-03-03-earl/anakin-800-16e671698.png&quot; alt=&quot;anakin RL training architecture diagram&quot; srcset=&quot;/generated/2025-03-03-earl/anakin-400-d1f7d320f.webp 400w, /generated/2025-03-03-earl/anakin-600-d1f7d320f.webp 600w, /generated/2025-03-03-earl/anakin-800-d1f7d320f.webp 800w, /generated/2025-03-03-earl/anakin-806-d1f7d320f.webp 806w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although jax.jit-compatible environments are gaining more adoption in research, there are still many environments that can’t run under jax.jit that researchers care about. The Podracer solution to training on these at scale is called Sebulba. Sebulba involves splitting agents into actor and learner as shown in Figure 3 from the paper. Note that in this figure the arrows &lt;em&gt;do&lt;/em&gt; signify data copies.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2025-03-03-earl/sebulba-800-1b8f2b66e.png&quot; alt=&quot;sebulba RL training architecture diagram&quot; srcset=&quot;/generated/2025-03-03-earl/sebulba-400-edc91e3d3.webp 400w, /generated/2025-03-03-earl/sebulba-600-edc91e3d3.webp 600w, /generated/2025-03-03-earl/sebulba-800-edc91e3d3.webp 800w, /generated/2025-03-03-earl/sebulba-1000-edc91e3d3.webp 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of my main goals with Earl was to have a single agent implementation that could easily be run in either architecture. This is in contrast to what the team behind the Podracers paper did; the paper suggests they implemented agents twice, once for Anakin and once for Sebulba.&lt;/p&gt;

&lt;p&gt;The “pod” in “Podracers” is an allusion to a collection of TPUs that are all connected with high bandwidth. Later in this post I will discuss what advantages TPUs actually provide.&lt;/p&gt;

&lt;h2 id=&quot;gymnax-loop-earls-anakin&quot;&gt;Gymnax Loop: Earl’s Anakin&lt;/h2&gt;

&lt;p&gt;Earl’s implementation of Anakin is GymnaxLoop. &lt;a href=&quot;https://github.com/RobertTLange/gymnax&quot;&gt;Gymnax&lt;/a&gt; is a collection of RL environments implemented in JAX with a common interface, and Earl adopted that interface because it seemed more widely used than the alternatives. The GymnaxLoop implementation is mostly straight-forward, so here I only discuss some of the trickier things that I solved.&lt;/p&gt;

&lt;h3 id=&quot;avoiding-recompilation&quot;&gt;Avoiding recompilation&lt;/h3&gt;

&lt;p&gt;The first time a jax.jit function is run, it is compiled, which is slow. Unwanted recompilations are a performance foot-gun, so by default Earl will fail if the code is recompiled. When I enabled this failure, I learned that my Gymnax Loop was recompiling the main loop (act and learn) because the types of some part of the environment state where changing. After digging into it (made difficult due to a &lt;a href=&quot;https://github.com/jax-ml/jax/issues/23302&quot;&gt;JAX bug&lt;/a&gt; that I reported) I discovered that the change was that the initial state (returned by env.reset()) had weak_type=True on some arrays, but calls to env.step() changed the weak_type to False. GymnaxLoop fixes this by setting weak_type=False on all arrays in the environment before running. This avoids recompilation and thus speeds up training significantly.&lt;/p&gt;

&lt;h2 id=&quot;gymnasium-loop-earls-sebulba&quot;&gt;Gymnasium Loop: Earl’s Sebulba&lt;/h2&gt;

&lt;p&gt;Earl’s implementation of Sebulba is GymnasiumLoop. &lt;a href=&quot;https://gymnasium.farama.org/index.html&quot;&gt;Gymnasium&lt;/a&gt; is a widely-used interface for RL environments, which generally are not compatible with jax.jit. The GymnasiumLoop has a much more complex design, was much trickier to implement correctly and was also harder to optimize for performance.&lt;/p&gt;

&lt;p&gt;Here’s a diagram showing the system architecture. Sorry the text is a little small. You can open the image in a new window to zoom in.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2025-03-03-earl/gymnasium-loop-800-ced76e552.png&quot; alt=&quot;Gymnasium Loop system diagram&quot; srcset=&quot;/generated/2025-03-03-earl/gymnasium-loop-400-bb341e4c4.webp 400w, /generated/2025-03-03-earl/gymnasium-loop-600-bb341e4c4.webp 600w, /generated/2025-03-03-earl/gymnasium-loop-800-bb341e4c4.webp 800w, /generated/2025-03-03-earl/gymnasium-loop-1000-bb341e4c4.webp 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here are results from a test showing linear scaling on up to 6 learner devices (TPU v2 cores):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2025-03-03-earl/gymnasium_loop_scaling-563-9129f04da.png&quot; alt=&quot;Gymnasium Loop scaling graph&quot; srcset=&quot;/generated/2025-03-03-earl/gymnasium_loop_scaling-400-d0264f2f1.webp 400w, /generated/2025-03-03-earl/gymnasium_loop_scaling-563-d0264f2f1.webp 563w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before going further into details, why is all this complexity needed in the first place? That is never explicitly addressed in the podracers paper. I think the key thing is that in a naive loop of env.step(), agent.act(), the device (GPU) will be idle during env.step() and the CPU will be idle during agent.act(). So we can get much better throughput by double buffering: have one batch of actions being computed by the agent at the same time that a batch of observations is being computed by the environment. But in order to take advantage of this double buffering, you need the learning to be able to learn from batches of trajectories from different sets of environments that are delivered out of order. And that basically implies an actor-learner split, and once you’ve split the agent thus, one can get further throughput gains by scaling the number of actors and learners independently. And that’s basically the architecture: separate sets of actors and learners, communicating asynchronously, scaled independently.&lt;/p&gt;

&lt;p&gt;OK, now some details.&lt;/p&gt;

&lt;h3 id=&quot;agent-state-organization&quot;&gt;Agent state organization&lt;/h3&gt;

&lt;p&gt;A key design challenge was creating a flexible agent architecture that could work efficiently in both Anakin and Sebulba paradigms. Earl has two main base classes: &lt;a href=&quot;https://github.com/garymm/earl/blob/496737c4f3172caa151477d47280b3a172525138/earl/core.py#L57&quot;&gt;AgentState&lt;/a&gt; and &lt;a href=&quot;https://github.com/garymm/earl/blob/496737c4f3172caa151477d47280b3a172525138/earl/core.py#L233&quot;&gt;Agent&lt;/a&gt;. These are structured to enable Sebulba-style training while attempting to leave the user lots of freedom (they’re also used for Anakin-style training but they’re way too complex if that’s the only thing you need).&lt;/p&gt;

&lt;p&gt;AgentState has the following fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Actor. This is read and written by the actor.  This is also read by the learner when calculating the loss.  In agents that use recurrent networks, this includes the recurrent hidden states.&lt;/li&gt;
  &lt;li&gt;Nets. This holds the neural networks  This is read by the actor. It is read and written by the learner. Anything that needs a gradient computed needs to be in the networks.&lt;/li&gt;
  &lt;li&gt;Opt. Anything other than nets that also needs to be updated when optimizing (i.e. updating the networks). This is where optimizer state belongs.&lt;/li&gt;
  &lt;li&gt;Experience. This is state that is based on the trajectories accumulated by actors and sent to the learners.  For agents that use experience replay, this contains replay buffers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the key methods in Agent are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;act(self, actor_state: _ActorState, nets: _Networks, env_step: EnvStep) -&amp;gt; ActionAndState[_ActorState]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_experience(self,  experience_state: _ExperienceState,  actor_state_pre: _ActorState,   actor_state_post: _ActorState,  trajectory: EnvStep) -&amp;gt; _ExperienceState&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partition_for_grad(self, nets: _Networks) -&amp;gt; tuple[_Networks, _Networks]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loss(self, nets: _Networks, opt_state: _OptState, experience_state: _ExperienceState) -&amp;gt; tuple[Scalar, _ExperienceState]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimize_from_grads(self, nets: _Networks, opt_state: _OptState, nets_grads: PyTree) -&amp;gt; tuple[_Networks, _OptState]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shard_actor_state(self, actor_state: _ActorState, learner_devices: Sequence[jax.Device]) -&amp;gt; _ActorState&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The method signatures and AgentState structure force algorithms to be implemented such that GymnasiumLoop can run any agent in a scalable manner.&lt;/p&gt;

&lt;h3 id=&quot;implicit-double-buffering&quot;&gt;Implicit double buffering&lt;/h3&gt;

&lt;p&gt;When I first thought about double buffering I thought I would write code that used two CUDA streams to overlap work. I was surprised to learn that JAX does not expose CUDA streams or any similar abstraction. Upon re-reading the Podracers paper, I noticed they wrote:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To make efficient use of the actor cores, it is essential that while a Python thread is stepping a batch of environments, the corresponding TPU core is not idle. This is achieved by creating multiple Python threads per actor core, each with its own batched environment. They threads alternate in using the same actor core, without manual synchronization.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I tried just having multiple threads use the same device, and lo-and-behold I got a huge speedup! Looking at a profile in Nvidia Nsight Systems revealed that under the hood, JAX had analyzed the computations coming in from the different threads, determined they were independent, and scheduled them on separate CUDA streams (really separate CUDA graphs). This is in contrast to PyTorch which by default puts all work on a single stream and requires the user to specify another stream if desired.&lt;/p&gt;

&lt;p&gt;Below you can see the Nsight Systems UI showing the different CUDA graphs at the top and the agent.step() overlapping with the env.step() at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2025-03-03-earl/nsight-two-threads-800-a6b5fc19f.png&quot; alt=&quot;Nsight Systems profile of two actor threads&quot; srcset=&quot;/generated/2025-03-03-earl/nsight-two-threads-400-e1ef4ba4c.webp 400w, /generated/2025-03-03-earl/nsight-two-threads-600-e1ef4ba4c.webp 600w, /generated/2025-03-03-earl/nsight-two-threads-800-e1ef4ba4c.webp 800w, /generated/2025-03-03-earl/nsight-two-threads-1000-e1ef4ba4c.webp 1000w&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;batching-and-sharding-data&quot;&gt;Batching and sharding data&lt;/h3&gt;

&lt;p&gt;The paper suggests that experience data is copied from the actors to the learners one batch at a time. This seems quite inefficient. I instead break up acting into cycles of configurable length, and copy one cycle’s worth of batches at a time from the actor to the learners (i.e. num_envs * steps_per_cycle units of observations, actions, rewards, etc).&lt;/p&gt;

&lt;p&gt;The paper does not address the details of how the data is stored and retrieved for replay. In Earl, the user specifies num_envs, which for GymnasiumLoop is the number of environments per actor thread. There are two actor threads per actor device. Each actor thread shards the trajectory and actor state evenly across the learner devices. Thus when the framework calls Agent.update_experience() on the learner device, the experience data has batch size = num_envs / len(learner_devices), which must be an integer (i.e. must divide evenly). The Agent is free to store and replay that experience in whatever way it chooses. For my R2D2 implementation, to keep things simple, I store the experience using that same batch size (num_envs / len(learner_devices)) and then replay some batch size that is an integer multiple of that batch size.&lt;/p&gt;

&lt;p&gt;One thing not mentioned in the paper but which is obviously necessary for many algorithms is copying of actor state to the learners. For example, in R2D2 the LSTM hidden states at the beginning of a trajectory are needed by the learners. The framework can take care of properly distributing the observations, actions and rewards, but the details of the actor state depend on the particular agent implementation, so users of GymnasiumLoop have to implement Agent.shard_actor_state(actor_state, learner_devices). Depending on the algorithm, some elements of the state will be sharded evenly to go along with the trajectory data, while other elements will be replicated across all learner devices or not copied at all.&lt;/p&gt;

&lt;h3 id=&quot;performance-tuning&quot;&gt;Performance tuning&lt;/h3&gt;

&lt;p&gt;In GymnasiumLoop, ideally all accelerator devices are being fully utilized. Getting there requires a lot of tuning. Some of the knobs available for tuning and what they do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Num_envs: the number or environments per actor thread (there are 2 actor threads per actor device). Increasing this will increase CPU usage during env.step() and increase actor device (e.g. GPU) usage during agent.act(). It will increase CPU memory usage (for the environment state). It will also increase memory usage on the actor device, moreso if the actor maintains per-environment state (e.g. recurrent hidden state).&lt;/li&gt;
  &lt;li&gt;Num_off_policy_optims_per_cycle: the number of times Agent.loss and Agent.optimize_from_grads is called between waiting for new experience data from the actors. Increasing this will increase learner device usage. It may cause the actor threads to block (and thus make the actor devices and CPUs idle) if the queue for experience data is full (currenty the queue has a max length of 2). Increasing it will also make the algorithm more off-policy, since it does more updates on experience that was produced by older policies.&lt;/li&gt;
  &lt;li&gt;The number of actor devices and learner devices. More learner devices effectively increases batch sizes and thus can help training be faster or more stable. More actor devices increases the rate at which new experience trajectories are made available to the learners. If the number of environments on a machine is limited by CPU cores or CPU memory, increasing the number of actor devices effectively reduces the actor batch size (num_envs).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The metrics that are currently exposed on every run are the cycle time for the learners (which includes getting new experience and then some number of loss + optimization steps), and the time the learners spend waiting for an actor to enqueue experience. Because JAX arrays are materialized asynchronously, the actor thread’s call to jax.device_put_sharded() will return before the data has actually been copied to the learner devices. Thus the learner device will be able to successfully retrieve experience from the queue, but computation may block waiting for the data to be copied. I don’t think there’s a good way to expose the exact amount of time spent waiting for copies during normal execution (doing so would require putting in barriers that could hurt performance). So the process I used for tuning performance was:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If learner device utilization is not high, try tweaking the above knobs to get it up.&lt;/li&gt;
  &lt;li&gt;When / if that didn’t succeed, use a profiler (I used NVidia Nsight Systems). This made it fairly easy to see when computation was waiting on copies.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;performance-footgun-implicit-vs-explicit-host-device-copies&quot;&gt;Performance footgun: implicit vs explicit host-&amp;gt;device copies&lt;/h3&gt;

&lt;p&gt;Using the profiler I was able to spot a blocking host-&amp;gt;device copy in the inner loop of the actor cycle that was caused by something like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps_per_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;observation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;observation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It turned out that the explicit conversion from Numpy to JAX arrays was much much slower than just passing the Numpy arrays directly into Agent.act. I confirmed the issue with this simplified example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jax&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The lazy function takes 0.3 milliseconds and the eager takes 1.1 (3.7x slowdown) on a Google Colab instance with a T4 GPU.&lt;/p&gt;

&lt;p&gt;Under the hood, the eager function launches 3 CUDA kernels, one for each array copy and one for the addition, returning to the Python interpreter between each. The lazy function goes into CUDA only once.&lt;/p&gt;

&lt;h3 id=&quot;batching-gymnasium-environments&quot;&gt;Batching Gymnasium environments&lt;/h3&gt;

&lt;p&gt;In the podracers paper section in Sebulba they write:
&lt;em&gt;To minimise the effect of Python’s GIL, when stepping a batch of environments in parallel, each Python actor-thread interacts with a special batched environment; this is exposed to Python as a single environment that takes a batch of actions and returns a batch of observations; behind the scenes it steps each environment in the batch in parallel using a shared pool of C++ threads.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The functionality described in the paper is provided for some environments by &lt;a href=&quot;https://envpool.readthedocs.io/en/latest/&quot;&gt;EnvPool&lt;/a&gt;. For Gymnasium environments not supported by EnvPool, Earl will apply Gymnasium’s built-in vectorization which uses Python multiprocessing to run multiple copies of the environment in parallel. This is much much slower than EnvPool, and one fun thing I had to work around was that each subprocess would try to pre-allocate most of the GPU memory on startup (this happens whenever you import jax). I worked around this by setting an environment variable telling JAX to only use the CPU in those environment subprocesses.&lt;/p&gt;

&lt;h2 id=&quot;potential-improvements&quot;&gt;Potential improvements&lt;/h2&gt;

&lt;h3 id=&quot;pmap---automatic-parallelism&quot;&gt;Pmap -&amp;gt; automatic parallelism&lt;/h3&gt;

&lt;p&gt;When the Podracers paper was written, jax.pmap was the recommended way of parallelizing computation across multiple devices. Since then, the JAX team has developed “&lt;a href=&quot;https://docs.jax.dev/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html&quot;&gt;automatic parallelism&lt;/a&gt;” and encourages its use over pmap. The basic idea is that the programmer shards (or replicates, which in JAX is called a type of sharding) arrays across devices, and the compiler and runtime automatically figure out where computation should happen and where function outputs should go.&lt;/p&gt;

&lt;p&gt;I prototyped an implementation of GymnaxLoop that used automatic parallelism before throwing it away and settling on the explicit Pmap approach. The reason is that I couldn’t convince myself that sampling randomly from a replay buffer wouldn’t result in extra cross-device copies and uneven workloads. Earl is currently entirely agnostic to how an agent manages its experience state (which will include the replay buffers). Experience replay could be implemented in a way that is compatible with automatic parallelism (I believe the main constraint is that buffer has to be sized such that it can be sharded evenly across devices, and reads and writes are balanced across all devices), but guaranteeing this would require the framework to be more opinionated about how replay buffers are managed.&lt;/p&gt;

&lt;p&gt;If I were to do this, I would look to &lt;a href=&quot;https://dm-acme.readthedocs.io/en/latest/&quot;&gt;DeepMind’s Acme&lt;/a&gt; for inspiration. It is extremely prescriptive about how experience state is managed, and I think a similar design could result in something that’s guaranteed to be performant with JAX’s automatic parallelism.&lt;/p&gt;

&lt;h3 id=&quot;multiple-losses&quot;&gt;Multiple losses&lt;/h3&gt;

&lt;p&gt;Some algorithms compute different loss terms for different subsystems. Earl doesn’t currently support this, but it wouldn’t be too hard to add.&lt;/p&gt;

&lt;h2 id=&quot;scaling-to-multiple-machines-or-how-special-are-the-pods-really&quot;&gt;Scaling to multiple machines, or how special are the “pods” really?&lt;/h2&gt;

&lt;p&gt;Earl currently only supports single-machine training. Supporting multi-machine would be as straightforward as adding a call to jax.distributed.initialize() in the training script. However, when scaling to multiple machines, network bandwidth becomes a critical factor. Let’s analyze how bandwidth affects training throughput and compare TPU pods with modern GPU clusters.&lt;/p&gt;

&lt;p&gt;The “pod” in the “Podracers” article is a reference to a Google Cloud TPU pod, which is a group of TPU chips that have high bandwidth interconnections. Let’s analyze how bandwidth affects training throughput. Both Anakin and Sebulba have to send gradients between all learner devices before every optimizer step, and this latency cannot easily be hidden by overlapping that work with other work (unlike the transfers from actors to learners, which can be overlapped with both acting and learning). The amount of data that needs to be meaned is: (bits per gradient) x (num parameters).&lt;/p&gt;

&lt;p&gt;Let’s say each device has bandwidth of R bits / sec and the gradients take S bits. Assuming the mean is calculated and sent back using a tree topology with N leaves, and we have L learner devices the time spend transmitting data around will be:&lt;/p&gt;

&lt;p&gt;(receive L / N gradients at leaves) + (recieve N gradients at depth D-1 of tree) + … (send mean gradient back to devices at depth 1) + …&lt;/p&gt;

&lt;p&gt;This ignores the actual computation time which will be insignificant, but I think that’s pretty true. If we have N = 8 leaves, this will be:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mfrac&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mfrac&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\frac{1}{R} ( \frac{L}{8}S + 8S + 4S + 2S + 2S + 4S + 8S + \frac{L}{8}S) =&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.2173em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8451em;&quot;&gt;&lt;span style=&quot;top:-2.655em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8723em;&quot;&gt;&lt;span style=&quot;top:-2.655em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7667em;vertical-align:-0.0833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7667em;vertical-align:-0.0833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7667em;vertical-align:-0.0833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7667em;vertical-align:-0.0833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7667em;vertical-align:-0.0833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.7667em;vertical-align:-0.0833em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.2173em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8723em;&quot;&gt;&lt;span style=&quot;top:-2.655em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;28&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\frac{S}{R} ( \frac{L}{4} + 28)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.2173em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8723em;&quot;&gt;&lt;span style=&quot;top:-2.655em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8723em;&quot;&gt;&lt;span style=&quot;top:-2.655em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;L&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now let’s try to get some sensible values of L, R, and S.
Most online RL research uses relatively small numbers of parameters compared to modern LLMs (e.g. Dreamer v3 XL has 300 million parameters, the unusually large Gato has 1.2 billion).
To work an example, let’s say we use 16 bits per gradient x 1 billion parameters = 16 Gbits. In the Podracers paper, they show measurements up to 128 devices (TPU cores), so L = 128. The TPU v6e has R = 3584 Gbps of inter-chip interconnect bandwidth, which gets us:&lt;/p&gt;

&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;mn&gt;3584&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;128&lt;/mn&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;28&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.27&lt;/mn&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\frac{16}{3584} ( \frac{128}{4} + 28) = 0.27s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:2.0074em;vertical-align:-0.686em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.3214em;&quot;&gt;&lt;span style=&quot;top:-2.314em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;3584&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.677em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.686em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.3214em;&quot;&gt;&lt;span style=&quot;top:-2.314em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.677em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.686em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0.27&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;p&gt;To answer how special TPU pods are, let’s compare this to NVidia GPUs. NVidia’s GB200 can connect up to 72 GPUs at 1800 Gbps, but (at least according to official peak numbers from &lt;a href=&quot;https://www.nvidia.com/en-us/data-center/gb200-nvl72/&quot;&gt;Nvidia&lt;/a&gt; and &lt;a href=&quot;https://cloud.google.com/tpu/docs/v6e&quot;&gt;Google&lt;/a&gt;) it has 5x the compute and memory than a TPU v6e, so 128 TPU v6e are roughly equivalent to 26 GB200s. The same reduction would take&lt;/p&gt;

&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;16&lt;/mn&gt;&lt;mn&gt;1800&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;28&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.31&lt;/mn&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\frac{16}{1800} ( \frac{26}{4} + 28) = 0.31s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:2.0074em;vertical-align:-0.686em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.3214em;&quot;&gt;&lt;span style=&quot;top:-2.314em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;1800&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.677em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.686em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.3214em;&quot;&gt;&lt;span style=&quot;top:-2.314em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.677em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;26&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.686em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.6444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0.31&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;p&gt;Pretty close! When Google published the Podracers paper, they may have had a huge lead in distributed ML due to their TPU networking, but it seems that NVidia has mostly caught up, at least if the equivalence of 5 TPU v6e cores = 1 GB200 GPU is roughly correct.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Years ago only DeepMind and OpenAI could do distributed RL at scale. Today, thanks to the libraries, APIs, on-demand cloud computing, and knowledge that is available, it’s within reach of a very small team (like me!).&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I started Earl while working at the Astera Institute, though I didn’t implement distributed training until after I left.
I thank Jed McCaleb for agreeing to let me open-source it.
My coworkers at Astera contributed to Earl early on: Andrew Grebenisan, Mick van Gelderen and Eric Alt.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I use these terms for consistency with the paper, which in no way should be read as my endorsement of The Phantom Menace. Though I did enjoy the &lt;a href=&quot;https://en.wikipedia.org/wiki/Star_Wars_Episode_I:_Racer&quot;&gt;Racer&lt;/a&gt; game. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>garymm</name></author><category term="programming" /><category term="machine learning" /><summary type="html">In this post I will briefly describe Earl, a reinforcement learning (RL) framework I wrote that enables scalable distributed training across multiple devices, and discuss some of the things I learned along the way.</summary></entry><entry><title type="html">Starflate: Deflate decompression in C++23</title><link href="http://garymm.org/blog/2025/01/31/starflate/" rel="alternate" type="text/html" title="Starflate: Deflate decompression in C++23" /><published>2025-01-31T00:00:00-08:00</published><updated>2025-01-31T00:00:00-08:00</updated><id>http://garymm.org/blog/2025/01/31/starflate</id><content type="html" xml:base="http://garymm.org/blog/2025/01/31/starflate/">&lt;p&gt;In this post I describe some things I learned while working on &lt;a href=&quot;https://github.com/garymm/starflate&quot;&gt;Starflate&lt;/a&gt;, an implementation of Deflate decompression in C++23 that I wrote with my friend &lt;a href=&quot;https://github.com/oliverlee&quot;&gt;Oliver Lee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Deflate is a compression codec used in GZip, Zip, PNG and other formats. I wanted to get hands-on with GPU programming and I decided implementing Deflate decompression would be a fun way to do that. After finishing the CPU-only implementation, I realized that there is no way to efficiently parallelize it, so I will have to find something else to use to learn GPU programming. But along the way I did learn quite a bit about compression and C++.&lt;/p&gt;

&lt;h2 id=&quot;deflate-decompression&quot;&gt;Deflate decompression&lt;/h2&gt;

&lt;p&gt;I think this diagram does a pretty good job of showing the different layers in the Deflate compression algorithm:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2025-01-31-deflate-800-0c3ca2880.png&quot; alt=&quot;deflate compression layers&quot; srcset=&quot;/generated/2025-01-31-deflate-400-635bef326.webp 400w, /generated/2025-01-31-deflate-600-635bef326.webp 600w, /generated/2025-01-31-deflate-800-635bef326.webp 800w, /generated/2025-01-31-deflate-1000-635bef326.webp 1000w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 4 from &lt;a href=&quot;https://doi.org/10.1002/cpe.7454&quot;&gt;Takafuji et. al, 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The innermost layer is LZSS, in which the input is a series of either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A “literal”, meaning just copy this byte to the output, or&lt;/li&gt;
  &lt;li&gt;A length and backwards-distance pair (l, d),  meaning copy l bytes starting from output[-d] to output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second layer is an encoding scheme for the length and distance pairs that doesn’t seem to have a name, but is shown in the diagam as “deflate” format. The deflate standard defines a code table for distances and another for lengths. This steps to decode goes something like:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Look up the code in the table. This gives a base value and a number of extra bits to read from the input.&lt;/li&gt;
  &lt;li&gt;Read those extra bits from the input, interpret them as an integer.&lt;/li&gt;
  &lt;li&gt;Add the integer to the base value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The outermost layer is Huffman coding. I won’t do a better job than &lt;a href=&quot;https://en.wikipedia.org/wiki/Huffman_coding&quot;&gt;Wikipedia&lt;/a&gt; of explaining it, but basically it’s a provably optimal (as in maximally compact) prefix-free coding scheme (meaning the code for any symbol is not a prefix of the code for any other symbol).&lt;/p&gt;

&lt;p&gt;Finally, there is the added complexity that the Huffman code tables themselves can be included in the compressed data, and they are encoded using a scheme similar to the second-layer (“deflate” coding) scheme (but slightly different).&lt;/p&gt;

&lt;h2 id=&quot;starflate-design&quot;&gt;Starflate design&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/garymm/starflate/blob/289b78afa5aa93f0971fcee9f5d17d3bf0a93dd2/src/decompress.cpp&quot;&gt;core implementation of decompression&lt;/a&gt; is 391 lines of code (excluding comments and blank lines), and I think it’s relatively readable. However, there are another ~1300 lines of code in helper libraries we wrote for dealing with bit streams and Huffman coding. These helper libraries allowed the main code to stay quite short and readable.&lt;/p&gt;

&lt;h3 id=&quot;bit_span&quot;&gt;bit_span&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/garymm/starflate/blob/289b78afa5aa93f0971fcee9f5d17d3bf0a93dd2/huffman/src/bit_span.hpp&quot;&gt;bit_span&lt;/a&gt; is like std::span in that it is a non-owning view of a contiguous extent of the same type of data. Unlike span, bit_span allows its users to iterate over individual bits, even though the underlying data is stored as bytes.&lt;/p&gt;

&lt;h3 id=&quot;huffmantable&quot;&gt;huffman::table&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/garymm/starflate/blob/289b78afa5aa93f0971fcee9f5d17d3bf0a93dd2/huffman/src/table.hpp&quot;&gt;huffman::table&lt;/a&gt; is a Huffman code table. For ease of testing it has a bunch of different constructors, but the only one used in decompression is the one that takes a range of pairs of (symbol range, bitsize). Huffman coding uses prefix-free codes, meaning that we decode the input one bit at a time and we’re done as soon as we find the bit pattern in the table. Internally the table stores things sorted lexicographically, which allows for efficient decoding by keeping track of where we are in the table in between attempts to decode the bits. In an attempt to be idiomatic C++, the table exposes iterators with the standard begin() and end() methods. The main use of the table class is in &lt;a href=&quot;https://github.com/garymm/starflate/blob/289b78afa5aa93f0971fcee9f5d17d3bf0a93dd2/huffman/src/decode.hpp#L74&quot;&gt;decode_one&lt;/a&gt;, the pseudo-code for which is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;huffman_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;table_pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffman_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# iterator
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;current_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;current_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffman_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;table_pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# uses expected::error to hold the next iterator position
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;huffman_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;c-features--patterns&quot;&gt;C++ features / patterns&lt;/h2&gt;

&lt;p&gt;A few C++ features or patterns I learned along the way. Thanks to Oliver for teaching me all these (and more that didn’t stick!).&lt;/p&gt;

&lt;h3 id=&quot;constexpr&quot;&gt;constexpr&lt;/h3&gt;

&lt;p&gt;My biggest C++ lesson learned is that a large fraction of the language and library features are compatible with constexpr, meaning they can be evaluated at compile time. While there are potential runtime performance benefits to this, it’s also cool that this guarantees the code contains no undefined behavior. That is, this is a way to convert potential runtime errors into compile-time errors. This is the one feature of C++ that I actually missed when writing Rust recently.&lt;/p&gt;

&lt;h3 id=&quot;stdexpected&quot;&gt;std::expected&lt;/h3&gt;

&lt;p&gt;Added in C++23, std::expected contains either an expected or an error value. It’s a sane way of propagating errors and we used it extensively. This is one of those things that I didn’t notice was missing from the language when I worked at Google because Google had its own version. Actually the standard library version is better because both the expected and error types can be templated, which we took advantage of for huffman::table::find’s return type.&lt;/p&gt;

&lt;h3 id=&quot;the-overload-pattern-pattern-matching&quot;&gt;The overload pattern: pattern matching&lt;/h3&gt;

&lt;p&gt;You can combine std::variant, std::visit, and the overload pattern to get something like Rust’s pattern matching.
We used this &lt;a href=&quot;https://github.com/garymm/starflate/blob/289b78afa5aa93f0971fcee9f5d17d3bf0a93dd2/src/decompress.cpp#L227&quot;&gt;here&lt;/a&gt; to dispatch to different code paths depending on wheter we decoded a literal byte to be copied to the output, or length of previous output to be copied. The syntax for it is terrible though. This example from &lt;a href=&quot;https://www.cppstories.com/2019/02/2lines3featuresoverload.html/&quot;&gt;C++ Stories&lt;/a&gt; is a good one:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;overload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()...;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intFloatString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overload&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;int: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;float: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;string: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;intFloatString&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;template-deduction-guide&quot;&gt;Template deduction guide&lt;/h3&gt;

&lt;p&gt;A template deduction guide is some code that one can add to a templated function or class that tells the compiler how to fill in template arguments. This can make using the templated function or class much more readable.&lt;/p&gt;

&lt;p&gt;This example from &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/class_template_argument_deduction#User-defined_deduction_guides&quot;&gt;cppreference&lt;/a&gt; is a good one:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// declaration of the template&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;container&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// additional deduction guide&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator_traits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// uses&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK: deduces T=int using an implicitly-generated guide&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK: deduces T=double&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;missing-feature-iterator_interface&quot;&gt;Missing feature: iterator_interface&lt;/h3&gt;

&lt;p&gt;A lot of the standard library exposes and operates on iterators, so it’s nice to also do so when writing custom data structures. Quoting the &lt;a href=&quot;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2727r4.html&quot;&gt;proposal for adding std::iterator_interface&lt;/a&gt;: “Writing STL iterators is surprisingly hard. There are a lot of things that can subtly go wrong. It is also very tedious, which of course makes it error-prone.” We needed a couple of iterators (one for bit_span and one for huffman::table), so we added a simple version of the &lt;a href=&quot;https://github.com/garymm/starflate/blob/289b78afa5aa93f0971fcee9f5d17d3bf0a93dd2/huffman/src/detail/iterator_interface.hpp&quot;&gt;iterator_interface&lt;/a&gt;. There is an implementation in &lt;a href=&quot;https://www.boost.org/doc/libs/1_87_0/doc/html/boost_stlinterfaces/tutorial___iterator_interface_.html&quot;&gt;Boost&lt;/a&gt;, but we wanted to avoid any external dependencies.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-c-is-horrible&quot;&gt;Setting up C++ is horrible&lt;/h2&gt;

&lt;p&gt;C++ takes an insane amount of set-up to get a repository that has what are extremely easy in other languages. We set the following up, and none of it is really standard or easy to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build system. One has to choose between Make, CMake, Meson, Bazel, etc. We chose Bazel because it’s good and we’re used to it, but it takes a lot of work to set up, it’s poorly documented, and less common combinations of features (like C++ test coverage with Clang) have been broken.&lt;/li&gt;
  &lt;li&gt;Hermetic toolchain, meaning inside the repo we define what versions of Clang, GCC, etc we want to use, rather than relying on whatever is installed on the system.&lt;/li&gt;
  &lt;li&gt;Sanitizers. E.g. thread sanitizer, address sanitizer, undefined behavior sanitizer. These are compilation modes that instrument the code and fail if the code does something bad. Address sanitizer and undefined behavior sanitizer aren’t needed for most other languages, but I think it’s pretty insane to write C++ without them.&lt;/li&gt;
  &lt;li&gt;Static analysis (AKA linting). Basically turn on all the compiler warnings and treat them as errors (pretty insane that this is not the default for most of the warnings), and also run clang-tidy. Running clang-tidy through bazel is not straightforward but Oliver figured it out.&lt;/li&gt;
  &lt;li&gt;Autoformatting. Again insane that this is not the default, and one needs to do extra work to get it configured in editors and enforced in CI.&lt;/li&gt;
  &lt;li&gt;Bringing in third party dependencies is horrible, and you need at least some third party dependencies because the standard library doesn’t include a unit test library.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>garymm</name></author><category term="programming" /><category term="cpp" /><summary type="html">In this post I describe some things I learned while working on Starflate, an implementation of Deflate decompression in C++23 that I wrote with my friend Oliver Lee.</summary></entry><entry><title type="html">Assembling an infrastructure for machine learning research</title><link href="http://garymm.org/blog/2025/01/27/assembling-ml-exp-infra/" rel="alternate" type="text/html" title="Assembling an infrastructure for machine learning research" /><published>2025-01-27T00:00:00-08:00</published><updated>2025-01-27T00:00:00-08:00</updated><id>http://garymm.org/blog/2025/01/27/assembling-ml-exp-infra</id><content type="html" xml:base="http://garymm.org/blog/2025/01/27/assembling-ml-exp-infra/">&lt;p&gt;While working on machine learning research at the Astera Institute&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I led a team that assembled a system that enabled researchers to quickly and easily run experiments that used up to a full datacenter’s worth of GPUs. I intentionally wrote “assemble” rather than “build”, because the system mostly consists of off-the-shelf components. The challenge was in digging through the huge number of options for each possible piece of functionality, selecting appropriately, gluing things together into a working system, and designing an easy but powerful interface. I’m proud of how little code we wrote relative to how much functionality the system provides.&lt;/p&gt;

&lt;p&gt;Let’s start with the core functionality that the system provided:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Takes code from the user’s git branch.&lt;/li&gt;
  &lt;li&gt;Runs the code on a cluster with a specifiable number of trials running in parallel, and with each trial using a specifiable number of GPUs.&lt;/li&gt;
  &lt;li&gt;Executes a     search using a specifiable search space and algorithm, or multiple trials with different random seeds to get a distribution of results for a fixed set of hyperparameters.&lt;/li&gt;
  &lt;li&gt;Persists the results and makes them viewable in a web UI, or via CSV files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s go into how this is all implemented!&lt;/p&gt;

&lt;h2 id=&quot;the-components&quot;&gt;The components&lt;/h2&gt;

&lt;h3 id=&quot;hardware&quot;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;We rented hardware from Voltage Park, who at the time only offered exactly one thing: bare-metal servers running Ubuntu with 8 Nvidia GPUs. Because of pre-existing contracts, we didn’t have any choice in hardware or cloud providers. This constrained the design space for some of the other parts of the system.&lt;/p&gt;

&lt;h3 id=&quot;kubernetes-on-talos-hardware-abstraction-and-workload-orchestration&quot;&gt;Kubernetes on Talos: Hardware abstraction and workload orchestration&lt;/h3&gt;

&lt;p&gt;Just as an operating system abstracts over CPUs and RAM on a computer and manages the life cycles of processes, Kubernetes abstracts over all the hardware in a cluster and manages the life cycles of containers.&lt;/p&gt;

&lt;p&gt;We ended up using &lt;a href=&quot;https://www.talos.dev&quot;&gt;Talos&lt;/a&gt;, a Linux distribution that includes Kubernetes. Overall we were really happy with that choice. It’s well-designed, well-documented, and well-supported.&lt;/p&gt;

&lt;h4 id=&quot;the-journey&quot;&gt;The journey&lt;/h4&gt;

&lt;p&gt;While there are alternatives, Kubernetes is by far the most popular system in this category and that brings with it a huge ecosystem of tools, services, patterns and documentation, so for me it was an easy choice.&lt;/p&gt;

&lt;p&gt;The difficult thing was figuring out how to run it. Big cloud providers like Azure or CoreWeave provide a managed Kubernetes service. Because we were tied to Voltage Park, managed Kubernetes services weren’t an option. There are many ways to run Kubernetes on your own. I initially picked Kubespray because it was mentioned in the official Kubernetes documentation and it was built on Ansible, which we were already using. While I did successfully run a cluster using Kubespray, I was not satisfied:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creating or modifying a cluster is very slow. Like 30 minutes to apply a configuration change to a 6 node cluster.&lt;/li&gt;
  &lt;li&gt;Doing normal things would often fail and leave the cluster in some unknown and probably invalid state that was very difficult to recover from. Because Kubespray makes changes to the underlying node OS, but it doesn’t take full responsibility for the OS the way Talos does, getting back into a good state would require reinstalling the OS and then re-running Kubespray, which would take over an hour.&lt;/li&gt;
  &lt;li&gt;We had mysterious and hard to debug issues with the GPUs becoming inaccessible, which we worked around by rebooting the nodes.&lt;/li&gt;
  &lt;li&gt;There is no paid support option and I couldn’t resolve the above issues using the free community-provided support (including the patchy documentation).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In contrast, Talos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Takes much less time to apply configuration (sorry I don’t remember the timing, but the fact that I don’t remember means it was not a big deal!).&lt;/li&gt;
  &lt;li&gt;Installs the operating system in a pre-configured state such that it is ready to be part of the Kubernetes cluster, and the OS is immutable (read-only after installation), so it is much less likely to end up in weird states.&lt;/li&gt;
  &lt;li&gt;Had no such flaky GPU issues.&lt;/li&gt;
  &lt;li&gt;Has paid support options and excellent response times to community-reported bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main challenge we had with Talos is that our cloud provider did not give us a way to install a custom OS. After first trying to run it inside a VM inside the Ubuntu host, we ended up finding a way to overwrite Ubuntu with Talos from within Ubuntu! This meant we could run Talos on bare metal.&lt;/p&gt;

&lt;h3 id=&quot;distribution-registry-container-image-hosting&quot;&gt;Distribution Registry: Container image hosting&lt;/h3&gt;

&lt;p&gt;Container images are the unit of distribution for code that runs on Kubernetes. A container registry is a service that stores and allows clients to upload and download container images. There are many options for cloud-hosted managed container registries, but we wanted our images to be stored on the same local network as our Kubernetes nodes in order to maximize bandwidth when downloading (AKA “pulling”) images. So we ran &lt;a href=&quot;https://distribution.github.io/distribution/about/&quot;&gt;Distribution Registry&lt;/a&gt; inside our cluster.&lt;/p&gt;

&lt;h4 id=&quot;the-journey-1&quot;&gt;The journey&lt;/h4&gt;

&lt;p&gt;The main difficulties with self-hosting the registry was in configuring network access. Our requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The registry is accesible via HTTPS to pods inside the cluster. This is needed because Katib (discussed below) &lt;a href=&quot;https://github.com/kubeflow/katib/blob/5723604d419c5ba5bf01240b7be5ebf55aaee0bc/pkg/webhook/v1beta1/pod/utils.go#L63&quot;&gt;fetches image metadata directly from the registry&lt;/a&gt; and there is no easy way to tell it to connect without HTTPS.&lt;/li&gt;
  &lt;li&gt;Image pushes and pulls do not go through Tailscale, since that reduces bandwidth and our images are pretty large.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We ended up with the following solution:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Tailscale name is used for the registry. We configured Tailscale to automatically generate an SSL certificate so connections over HTTPS work.&lt;/li&gt;
  &lt;li&gt;We configured our cluster’s DNS to forward requests for .ts.net domains to an in-cluster Tailscale DNS. So connections from inside a pod inside the cluster also go through Tailscale.&lt;/li&gt;
  &lt;li&gt;We configured our containerd, which is responsible for pulling images when starting containers, to treat the registry’s Tailscale domain name as an alias of the registry’s in-cluster .svc.cluster.local name, thus bypassing Tailscale encryption and maintaining fast image pulls.&lt;/li&gt;
  &lt;li&gt;We configured Kaniko (discussed below) to push to the registry through its .svc.cluster.local name, thus bypassing Tailscale ant maintaining fast image pushes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kaniko-in-cluster-image-building&quot;&gt;Kaniko: In-cluster image building&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/kaniko&quot;&gt;Kaniko&lt;/a&gt; takes in a git repository URL and revision and a path to a Dockerfile within the repository, and it builds an image according to the Dockerfile and pushes it to our Distribution Registry. This is how a user’s code gets into a container image.&lt;/p&gt;

&lt;h4 id=&quot;the-journey-2&quot;&gt;The journey&lt;/h4&gt;

&lt;p&gt;We started building images locally on the user’s computer and then pushing the image from there to the cluster. This worked, but due to some large dependencies (e.g. PyTorch alone is over 900 MB), any push of the image layer that contained the dependencies was very slow. Since the actual code being modified (i.e. the git repo) was much smaller, it made sense to upload only that from the user’s computer to the cluster, and then build the image in the cluster and then the push to the registry would happen over a fast local connection. This does require users to commit and push their code to git before starting an experiment, but that is a good practice anyways.&lt;/p&gt;

&lt;h3 id=&quot;katib-multi-trial-experiment-orchestration&quot;&gt;Katib: Multi-trial experiment orchestration&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kubeflow.org/docs/components/katib/&quot;&gt;Katib&lt;/a&gt; is a system for running distributed hyperparameter search on Kubernetes. A “search” over different random seeds can be used as a way to get a distribution of results for a fixed set of hyperpartmeters. Katib is very flexible but that flexibility means it requires a lot of configuration for each experiment. We were able to simplify the user experience dramatically through a mix of automation and convention. The main things that Katib needs to know are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The search space. We require the user to write this in a YAML file.&lt;/li&gt;
  &lt;li&gt;The metrics to optimize. We require the user to write this in the same YAML file.&lt;/li&gt;
  &lt;li&gt;How to run an individual trial. E.g., container image to use, how many GPUs it needs. The Launch tool (described below) handles this automatically.&lt;/li&gt;
  &lt;li&gt;How to pass in hyperparameter values for a trial. The Launch tool handles this automatically, by assuming the user’s code follows the convention of using Draccus (described below) or something compatible for command line parsing.&lt;/li&gt;
  &lt;li&gt;How to extract metrics from a trial. The Launch tool handles this automatically, by assuming the user’s code follows the convention of using writing its metrics in Tensorboard format to the path specified in the --tensorboard_dir command line arg.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-journey-3&quot;&gt;The journey&lt;/h4&gt;

&lt;p&gt;Before Katib, we tried Ray Tune. The things we liked less about Ray Tune than Katib:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The APIs and documentation are a mess. In contrast, while Katib’s documentation is very incomplete, the repo contains lots of examples that are pretty instructive, and the APIs are much more intuitive.&lt;/li&gt;
  &lt;li&gt;Ray Tune requires writing an imperative Python file using the aforementioned confusing APIs for every search. It’s much easier to check the validity of a static YAML file that configures Katib than to check for all the ways Python code might be wrong.&lt;/li&gt;
  &lt;li&gt;Ray Tune seemed to require more restructuring of the researcher’s code.&lt;/li&gt;
  &lt;li&gt;The only way to track progress is via terminal output (whereas Katib has a nice web UI), and even totally correct use of Ray Tune results in massive amounts of warnings and useless messages being printed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;draccus-training-code-configuration-specification&quot;&gt;Draccus: Training code configuration specification&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dlwh/draccus&quot;&gt;Draccus&lt;/a&gt; is a simple Python library for defining and parsing configuration using dataclasses. The key thing that our system requires of the training code used for a trial is that a hyperparamter named “foo” is accepted and parsed via the command line flag --foo. This lets the Launch tool translate mechanically between the search space the user wrote in YAML and the command line for a trial.&lt;/p&gt;

&lt;h4 id=&quot;the-journey-4&quot;&gt;The journey&lt;/h4&gt;

&lt;p&gt;The main alternative I considered was Hydra. Hydra seems to have a superset of the functionality in Draccus but the added complexity of all of the options didn’t seem worth the benefits. Due to the modular system design, it would be easy to switch later if the team decides Hydra is needed.&lt;/p&gt;

&lt;h3 id=&quot;mlflow-experiment-metric-tracking&quot;&gt;MLflow: Experiment metric tracking&lt;/h3&gt;

&lt;p&gt;While Katib tracks the metrics being optimized in a search, there are many other metrics that can be useful to analyze, and having a UI to visualize metrics throughout a trial and compare them across experiments is really useful. Storing artifacts like videos of an agent interacting with an RL environment is also key for understanding training progress. For this we used &lt;a href=&quot;https://mlflow.org/docs/latest/tracking.html&quot;&gt;MLflow Tracking&lt;/a&gt;, a service to track metrics and store artifacts.&lt;/p&gt;

&lt;h4 id=&quot;the-journey-5&quot;&gt;The journey&lt;/h4&gt;

&lt;p&gt;The main alternative I considered was Weights &amp;amp; Biases. While they have very similar sets of features, we ended up choosing MLflow because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It has documented HTTP APIs, meaning one can interact with it from any language. I didn’t want to be forced to use Python for all the tooling that might want to interact with our experiment metrics.&lt;/li&gt;
  &lt;li&gt;It can be much cheaper. Databricks doesn’t make this clear, but if you provide your own storage (e.g. S3 bucket), they will host MLflow tracking for free. Or you can self-host for free.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we had settled on MLflow, the main challenge was finding and enforcing a convention on how to organize experiments and runs so people can find what they need. While I’m not confident this is the best solution, we ended up writing a small wrapper over the MLflow Python client that sets the experiment name and run name to match the Katib experiment and trial name. It gets this Katib metadata from environment variables set by the Launch tool. This at least makes it easy to go between the two systems.&lt;/p&gt;

&lt;h3 id=&quot;tailscale-secure-remote-access&quot;&gt;Tailscale: Secure remote access&lt;/h3&gt;

&lt;p&gt;In order to create and monitor experiments, users need to have access to Katib and other services running in our cluster. We used &lt;a href=&quot;https://tailscale.com&quot;&gt;Tailscale&lt;/a&gt; for this. It provides network encryption and DNS like a VPN but all the connections are peer-to-peer rather than forcing everything through a single VPN server. It works great and integrated seamlessly with our Google workspace accounts.&lt;/p&gt;

&lt;h3 id=&quot;launch-user-cli-that-glues-it-all-together&quot;&gt;Launch: User CLI that glues it all together&lt;/h3&gt;

&lt;p&gt;The only part of this that we wrote ourselves is a tool called Launch. It is &lt;a href=&quot;https://github.com/Astera-org/launch&quot;&gt;open source&lt;/a&gt; and written in Rust. Launch glues everything together. It takes in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A YAML file specifying the search space and to-be-optimized metrics.&lt;/li&gt;
  &lt;li&gt;A --gpus flag, which specifies the number of GPUs per trial.&lt;/li&gt;
  &lt;li&gt;A command to run for each trial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Triggers a build of a container image of the current git branch via Kaniko.&lt;/li&gt;
  &lt;li&gt;Constructs a full Katib experiment spec. In addition to the info from the user’s YAML file, it tells Katib to pass hyperparameter values via command line args according to the conventions (described above in the Katib section), and it adds the --tensorboard_dir arg.&lt;/li&gt;
  &lt;li&gt;Creates the Katib experiment.&lt;/li&gt;
  &lt;li&gt;Prints URLs of Katib and MLflow UI pages for the experiment.&lt;/li&gt;
  &lt;li&gt;Polls the cluster to check that the experiment starts and runs a trial succesfully.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-journey-6&quot;&gt;The journey&lt;/h4&gt;

&lt;p&gt;The main question I struggled with was what language to use to implement the tool. Due to the available libraries for interacting with Kubernetes and Katib, Go was the obvious choice. The factors in favor of Rust were pre-existing expertise on the team and me thinking it would be more fun in Rust. The availability of libraries was almost decisive in Go’s favor until we discovered we could use the OpenAPI Generator to generate Rust client libraries for &lt;a href=&quot;https://github.com/Astera-org/kubernetes-client-rust&quot;&gt;Kubernetes&lt;/a&gt; and &lt;a href=&quot;https://github.com/Astera-org/katib-client-rust&quot;&gt;Katib&lt;/a&gt;. Compared to Go, some of the nicest things about Rust are the power of the Serde library for deserializing configuration files and the error handling syntax (writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo()?&lt;/code&gt; is so much nicer than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if err := foo(); err != nil { return err }&lt;/code&gt; ).&lt;/p&gt;

&lt;h2 id=&quot;system-diagram&quot;&gt;System diagram&lt;/h2&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In reality all of this could be running on a single server, or distributed as shown, or something in between. Kubernetes handles the scheduling dynamically.&lt;/li&gt;
  &lt;li&gt;Not shown, but in addition to the depicted MLflow upload, user code also writes metrics to a local directory in Tensorboard format, which is what Katib monitors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2025-01-27-obelisk-infra-diagram-800-51182cbce.png&quot; alt=&quot;cruising with my team&quot; srcset=&quot;/generated/2025-01-27-obelisk-infra-diagram-400-4868e216e.webp 400w, /generated/2025-01-27-obelisk-infra-diagram-600-4868e216e.webp 600w, /generated/2025-01-27-obelisk-infra-diagram-800-4868e216e.webp 800w, /generated/2025-01-27-obelisk-infra-diagram-1000-4868e216e.webp 1000w&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-could-be-improved&quot;&gt;What could be improved&lt;/h2&gt;

&lt;p&gt;The biggest thing that I wish I could have improved before I left was the latency of building and pushing container images. While Kaniko is supposed to support caching, we weren’t able to get it working, so every time a user launches an experiment Kaniko would take a few minutes to rebuild the entire image (unless they didn’t change any code at all, in that case we would re-use a previously built image). The solution I wanted to try was to build and push the images using Bazel, which has many options for caching and would also allow us to have very fine-grained control over the image to optimize it for build speed. In particular, Bazel should make it possible to have one image layer per python package in our dependencies, so if a single dependency changes we wouldn’t need to rebuild and push a single huge layer that has all of our dependencies.&lt;/p&gt;

&lt;p&gt;Another thing I wanted to do was to modify the Katib UI to allow adding a link from Katib to MLflow. This is hopefully a simple change.&lt;/p&gt;

&lt;p&gt;Finally there are things which we didn’t implement only because we didn’t need them, but which I expected to need at some point. These include queuing experiment trials according to a priority (which I planned to implement via Kueue) and multi-machine trials (which I planned to implement via Kubeflow Training Operator).&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;p&gt;Matthew Behrens and Mick van Gelderen helped a lot with many aspects. Among other things, Matt actually got Talos running, including figuring out how to install it from inside Ubuntu and finding versions of Talos and the Nvidia system extensions that worked with our hardware, and Mick implemented most of the Launch tool, discovered Kaniko and proved it could work.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This work was done in 2024. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>garymm</name></author><category term="machine learning" /><category term="programming" /><summary type="html">While working on machine learning research at the Astera Institute1, I led a team that assembled a system that enabled researchers to quickly and easily run experiments that used up to a full datacenter’s worth of GPUs. I intentionally wrote “assemble” rather than “build”, because the system mostly consists of off-the-shelf components. The challenge was in digging through the huge number of options for each possible piece of functionality, selecting appropriately, gluing things together into a working system, and designing an easy but powerful interface. I’m proud of how little code we wrote relative to how much functionality the system provides. This work was done in 2024. &amp;#8617;</summary></entry><entry><title type="html">JAX and Equinox: What are they and why should I bother?</title><link href="http://garymm.org/blog/2024/09/08/jaxwhat/" rel="alternate" type="text/html" title="JAX and Equinox: What are they and why should I bother?" /><published>2024-09-08T00:00:00-07:00</published><updated>2024-09-08T00:00:00-07:00</updated><id>http://garymm.org/blog/2024/09/08/jax-equinox-what-and-why</id><content type="html" xml:base="http://garymm.org/blog/2024/09/08/jaxwhat/">&lt;p&gt;This post is written as a Jupyter notebook which you can run and edit using the link below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://githubtocolab.com/garymm-org/garymm-org.github.io/blob/master/assets/jax-equinox-what-and-why.ipynb&quot; target=&quot;_parent&quot;&gt;&lt;img src=&quot;https://colab.research.google.com/assets/colab-badge.svg&quot; alt=&quot;Open In Colab&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;jupyter-notebook&quot; style=&quot;position: relative; width: 100%; margin: 0 auto;&quot;&gt;
  &lt;div class=&quot;jupyter-notebook-iframe-container&quot;&gt;
    &lt;iframe src=&quot;/assets/jax-equinox-what-and-why.ipynb.html&quot; style=&quot;position: absolute; top: 0; left: 0; border-style: none;&quot; width=&quot;100%&quot; height=&quot;100%&quot; onload=&quot;this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + &apos;px&apos;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;
&lt;/div&gt;</content><author><name>garymm</name></author><category term="machine learning" /><category term="programming" /><summary type="html">This post is written as a Jupyter notebook which you can run and edit using the link below:</summary></entry><entry><title type="html">Using Fidelity as a checking account to 10x your yield</title><link href="http://garymm.org/blog/2024/08/31/fidelity/" rel="alternate" type="text/html" title="Using Fidelity as a checking account to 10x your yield" /><published>2024-08-31T00:00:00-07:00</published><updated>2024-08-31T00:00:00-07:00</updated><id>http://garymm.org/blog/2024/08/31/fidelity</id><content type="html" xml:base="http://garymm.org/blog/2024/08/31/fidelity/">&lt;p&gt;You can use an account at Fidelity as a checking account, meaning you can write and deposit checks and withdraw cash from ATMs.
Why do this?&lt;/p&gt;

&lt;h2 id=&quot;higher-yield&quot;&gt;Higher yield&lt;/h2&gt;

&lt;p&gt;At Fidelity you can get much higher yield on your money without sacrificing liquidity. E.g., the Schwab checking account I used before switching to Fidelity currently pays 0.45%. The money in the equivalent account at Fidelity had an annualized yield of 4.96% last week.&lt;/p&gt;

&lt;p&gt;To get that higher yield, Fidelity will invest your money in US treasury securities. The actual rate varies depending on the market. There are probably times when the yield will be lower than what you can get in a checking account. For example in 2021, Fidelity’s &lt;a href=&quot;https://fundresearch.fidelity.com/mutual-funds/performance-and-risk/31617H102&quot;&gt;Government Money Market Fund earned 0.01%&lt;/a&gt; whereas the average the &lt;a href=&quot;https://ycharts.com/indicators/us_interest_checking_account_rate&quot;&gt;checking account was paying 0.03%&lt;/a&gt;. However on this low end, the absolute difference is negligible, but when interest rates rise, the difference is huge (e.g. the current 4.96% vs 0.45%).&lt;/p&gt;

&lt;p&gt;Some consider treasuries riskier than an FDIC-insured checking account. Personally I think the odds losing money in both are very similar. They both involve the USA government defaulting on its obligations (treasury debts in one case, FDIC insurance in another). Fidelity does offer an FDIC-insured investment that is currently paying 2.72%, so ~5x what a checking account pays with the same risk.&lt;/p&gt;

&lt;h2 id=&quot;account-consolidation&quot;&gt;Account consolidation&lt;/h2&gt;

&lt;p&gt;You can choose to consolidate several accounts (checking, retirement investments, non-retirement investments, etc) at Fidelity and thus have one fewer financial institution to deal with. I personally have spending money (what I used to have in a checking account), non-retirement investments, a health savings account, and a retirement account there.&lt;/p&gt;

&lt;h2 id=&quot;how-to-set-it-up&quot;&gt;How to set it up&lt;/h2&gt;

&lt;p&gt;There’s two ways: use a brokerage account or a cash management account.
Here’s how they compare along the main axes I care about:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;brokerage account&lt;/th&gt;
      &lt;th&gt;cash management account&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ATM fees reimbursed&lt;/td&gt;
      &lt;td&gt;only if you have &amp;gt;$250k across all Fidelity accounts&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FDIC insured option&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;yes (lower yield)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;use 1 account for checking + investments&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When you open your account you’ll need to select what your “cash” holding is actually invested in. Currently the default for both is the Fidelity Government Money Market Fund (SPAXX). Then when you deposit money into your account it automatically is used to purchase shares of that holding.&lt;/p&gt;

&lt;p&gt;The routing number that Fidelity gives you for making direct deposits or withdrawals is actually associated with another institution (since Fidelity is not actually a bank that offers check accounts it has to partner with another institution to access the ACH system for transfers), so don’t be alarmed if you enter the routing number and some website says it’s not Fidelity.&lt;/p&gt;

&lt;p&gt;There’s lots more details over at the &lt;a href=&quot;https://www.bogleheads.org/wiki/Fidelity:_one_stop_shop#Suggested_account_usages&quot;&gt;Bogleheads wiki&lt;/a&gt;. The one inaccuracy I noticed there is it says that brokerage account ATM fees are reimbursed only for “Private Client Group”, but it’s actually both Private and Premium clients and Premium is a lower threshold (&amp;gt;$250k assets across all your Fidelity accounts, as of writing).&lt;/p&gt;</content><author><name>garymm</name></author><category term="money" /><summary type="html">You can use an account at Fidelity as a checking account, meaning you can write and deposit checks and withdraw cash from ATMs. Why do this?</summary></entry><entry><title type="html">Kagi vs Google search: a personal evaluation</title><link href="http://garymm.org/blog/2024/08/17/kagigoogle/" rel="alternate" type="text/html" title="Kagi vs Google search: a personal evaluation" /><published>2024-08-17T00:00:00-07:00</published><updated>2024-08-17T00:00:00-07:00</updated><id>http://garymm.org/blog/2024/08/17/kagi-vs-google-search</id><content type="html" xml:base="http://garymm.org/blog/2024/08/17/kagigoogle/">&lt;p&gt;&lt;a href=&quot;https://kagi.com&quot;&gt;Kagi&lt;/a&gt; is a relatively new search engine. Unlike Google, it makes money through user subscriptions and shows no ads.
Despite having decreased my usage of web search since the release of ChatGPT, I still use it a lot, and would be willing to pay a few
bucks a month for a significantly better experience. To evaluate Kagi, I put 75 of my recent search queries into Kagi and Google and rated
which I preferred. The queries spanned various topics, heavily tilted towards software engineering and computer topics.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;After this experiment I’ve decided to pay for Kagi and set it as my default search engine on both my phone and laptop.&lt;/p&gt;

&lt;p&gt;Here’s a qualitative comparison and some thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When Google shows ads on my phone, it really hurts the experience since it takes up the whole screen (often two screens of scrolling) and the ads are very very rarely relevant (with the exception of Google shopping results, which are sometimes relevant). On desktop the ads are a minor annoyance since I typically can still see the non-ad results without scrolling, and in general when I’m using my laptop I’m in less of a hurry. However maybe only 1/10 of my queries trigger non-Google-shopping ads. Probably because many of my queries are very specific and technical. As noted, Kagi doesn’t show any ads ever.&lt;/li&gt;
  &lt;li&gt;Google is better at extracting relevant information (either from web results or structured data like stock prices) and putting it at the top of the search results. For Kagi this information is usually in the pages that are at or near the top, but it takes an extra click to get it. E.g. a graph of a stock’s price.&lt;/li&gt;
  &lt;li&gt;Kagi shows more results from somewhat obscure, non-commercial sites and blogs. For some of my queries, these sites had excellent content that I would be very unlikely to find via Google.&lt;/li&gt;
  &lt;li&gt;Google has a lot of features that I don’t care about that you might (for example, live sports scores).&lt;/li&gt;
  &lt;li&gt;I didn’t thoroughly evaluate queries where I was trying to buy products online. Kagi doesn’t have a shopping search feature, and I expect I will probably continue to use Google shopping in addition to other sites to shop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having worked at Google on search and seen how much human ingenuity and money went into building it, it’s pretty shocking
that a &lt;a href=&quot;https://blog.kagi.com/what-is-next-for-kagi&quot;&gt;37 person&lt;/a&gt; (as of 2024-04) company can compete at all, but here we are!&lt;/p&gt;

&lt;h2 id=&quot;detailed-results&quot;&gt;Detailed results&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Tie: 47 / 75&lt;/li&gt;
  &lt;li&gt;Strongly prefer Google: 3 / 75&lt;/li&gt;
  &lt;li&gt;Strongly prefer Kagi: 4 / 75&lt;/li&gt;
  &lt;li&gt;Weakly prefer Google: 11 / 75&lt;/li&gt;
  &lt;li&gt;Weakly prefer Kagi: 10 / 75&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;google-big-wins&quot;&gt;Google big wins&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;“bryant controlbox google home”. &lt;a href=&quot;https://www.reddit.com/r/smarthome/comments/j32rkz/bryant_evolution_connex_connect_talking_to_other/&quot;&gt;This reddit post&lt;/a&gt; is the only satisfying result on either, and it’s in the first few results for Google but not for Kagi.&lt;/li&gt;
  &lt;li&gt;“piedmont california front setback requirements”. Google has an “AI Overview” with the answer (which appears to have been extracted from a PDF). Kagi’s top result doesn’t have the answer on the page, though it does link to the PDF that contains the answer. It would take at least a minute of careful reading of the page that Kagi returned to figure out which link to click to get the right PDF, and then loading and searching in the PDF might take another minute.&lt;/li&gt;
  &lt;li&gt;“intc stock”. Google has a nice interactive graph. Kagi has some data (like current price, 52 week range), but I like the interactive graph more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kagi-big-wins&quot;&gt;Kagi big wins&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;“lugg movers”. Google starts with several ads for other companies (competitors to Lugg I assume). On my phone, I needed to scroll down two full screens to get past the ads to the actual result I wanted. Kagi had no ads, and had the official Lugg page (which is what I wanted) at the top.&lt;/li&gt;
  &lt;li&gt;“josefk simt”. Kagi returned exactly what I wanted, which was &lt;a href=&quot;https://yosefk.com/blog/simd-simt-smt-parallelism-in-nvidia-gpus.html&quot;&gt;this page from “yosefk.com”&lt;/a&gt; even though I misspelled the domain name in the query. Google seems to have decided there were not enough relevant results for my whole query so it searched for just “josefk” and then noted next to each of the results that the result is “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Missing: simt&lt;/code&gt;”.&lt;/li&gt;
  &lt;li&gt;“how to value startup options”. On Desktop, Google starts with 4 ads which are totally irrelevant to what I wanted (though on my phone it didn’t show any ads). After that it had an AI summary which seemed reasonable and itself linked to some pretty good results. After that it had some decent web results. Kagi had no ads and had some of the same results as Google, but only Kagi had &lt;a href=&quot;https://www.benkuhn.net/optopt/&quot;&gt;this gem&lt;/a&gt; from Ben Kuhn near the top. Reading that lead to lots of other relevant links on that same site.&lt;/li&gt;
  &lt;li&gt;“union find algorithm”: Google’s top result is GeeksforGeeks, which has relevant info but is not presented particularly well and the page has a huge amount of annoying animated ads. Google’s second result is to a pretty useful Wikipedia article. Kagi links to Wikipedia first, and second to &lt;a href=&quot;https://labuladong.gitbook.io/algo-en/iv.-high-frequency-interview-problem/union-find-explanation&quot;&gt;this page&lt;/a&gt; which has no ads and has nice illustrations of the algorithm.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>garymm</name></author><category term="internet" /><category term="information" /><category term="computers" /><category term="search" /><summary type="html">Kagi is a relatively new search engine. Unlike Google, it makes money through user subscriptions and shows no ads. Despite having decreased my usage of web search since the release of ChatGPT, I still use it a lot, and would be willing to pay a few bucks a month for a significantly better experience. To evaluate Kagi, I put 75 of my recent search queries into Kagi and Google and rated which I preferred. The queries spanned various topics, heavily tilted towards software engineering and computer topics.</summary></entry><entry><title type="html">Attention, Memory, and Productive Knowledge Work</title><link href="http://garymm.org/blog/2024/06/09/attention-memory-productive-knowledge-work/" rel="alternate" type="text/html" title="Attention, Memory, and Productive Knowledge Work" /><published>2024-06-09T00:00:00-07:00</published><updated>2024-06-09T00:00:00-07:00</updated><id>http://garymm.org/blog/2024/06/09/attention-memory-and-productive-knowledge-work</id><content type="html" xml:base="http://garymm.org/blog/2024/06/09/attention-memory-productive-knowledge-work/">&lt;p&gt;Here I present some ideas for increasing the productivity of knowledge workers by structuring their workflows around attention and memory.
I wrote this for my own benefit, but I hope you find it useful too!&lt;/p&gt;

&lt;h2 id=&quot;workflow-matters&quot;&gt;Workflow matters&lt;/h2&gt;

&lt;p&gt;By “workflow” I mean loosely how execution tasks are scheduled and coordinated. By “execution tasks” I mean the activities which more-or-less-directly create value. For a software engineer, these tasks include programming and designing.&lt;/p&gt;

&lt;p&gt;Much of the most influential thinking about optimizing workflows to increase productivity comes from the automobile industry. The history of car manufacturing has several inspiring examples. In 1909, a Ford Model T Runabout sold for $27,977 (in 2024 USD). In 1925 (16 years later), it sold for $4,517 (also in 2024 USD)&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. The number of Model Ts you could buy per dollar increased by over 6x!&lt;/p&gt;

&lt;p&gt;Much of this increasing productivity was due to changes in the workflow. One major change was the introduction of the moving assembly line. Prior to the assembly line, cars were built through “the craft method”, in which teams of fifteen workers worked simultaneously on a single car”&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, which makes me think of young children playing soccer. This was inefficient in many ways. People got in each others’ ways, and they had to spend time walking around the factory to go between cars. With a moving assembly line, parts came to the workers and each worker could complete their stage of production without having to walk, coordinate with others, move tools, etc.&lt;/p&gt;

&lt;h2 id=&quot;attention-and-memory-matter&quot;&gt;Attention and memory matter&lt;/h2&gt;

&lt;p&gt;In manufacturing, the main inputs wer materials, equipment and manual labor. In knowledge work, the main input is human minds. To increase productivity, we need to produce more output without increasing inputs. One way to do this is to optimize the workflow! One way to optimize the knowledge worker workflow is to understand some properties of attention and memory.&lt;/p&gt;

&lt;p&gt;“Working memory is a cognitive system with a limited capacity that can hold information temporarily.”&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; It is essential for reasoning and decision making, which are crucial in knowledge work. The set of mental objects you can mentally manipulate at one time is limited by the capacity of your working memory. After switching tasks, it takes time to build up working memory.&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Long-term memory is the system that lets you restore previous working memories. “Forgetting” means something being lost from long-term memory. The “forgetting curve”&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; is a stylized fact. The longer you go without retrieving a memory, the more likely you are to forget it.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2024-06-09-attention-memory-productive-knowledge-work-forgetting-curve-659-d8ed2f894.png&quot; alt=&quot;the forgetting curve&quot; srcset=&quot;/generated/2024-06-09-attention-memory-productive-knowledge-work-forgetting-curve-400-9b57bcb5c.webp 400w, /generated/2024-06-09-attention-memory-productive-knowledge-work-forgetting-curve-600-9b57bcb5c.webp 600w, /generated/2024-06-09-attention-memory-productive-knowledge-work-forgetting-curve-659-9b57bcb5c.webp 659w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This conceptualization of human memory is quite similar to how computers work: working memory is analogous to a computer’s volatile memory (e.g., registers), long-term memory is analogous to persistent storage (e.g., a flash drive), and forgetting is analogous to deleting a file.&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;If it’s not obvious by now, workflow interacts with how our memories work. Every time one switches tasks, one must repopulate working memory before becoming productive. And extended periods between working on a task leads to forgetting. One must re-learn, which takes time.&lt;/p&gt;

&lt;h2 id=&quot;ways-our-workflow-makes-us-less-productive&quot;&gt;Ways our workflow makes us less productive&lt;/h2&gt;

&lt;p&gt;Yet many knowledge workers switch tasks very often. This has obviously been the case in many places I’ve worked, but there is some objective data to support this impression: A report from the summer of 2018 analyzed data from over fifty thousand active users of the RescueTime time tracking software. It found that the median time between checking communication apps like email and Slack was 6 minutes, and more than 2/3 of the users &lt;em&gt;never&lt;/em&gt; experienced an hour of uninterrupted time.&lt;sup id=&quot;fnref:7&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Besides this short-term switching between execution and collaboration, people often switch between tasks that they are executing. On several projects I worked on it was common to have work items that went unfinished for months, with sporadic bouts of work spaced weeks apart. Work done this way has many costs, but it definitely incurs costs of forgetting and re-learning.&lt;/p&gt;

&lt;h2 id=&quot;suggestions&quot;&gt;Suggestions&lt;/h2&gt;

&lt;p&gt;At a high level:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimize context switches so as to avoid cost of loading things into working memory.&lt;/li&gt;
  &lt;li&gt;Minimize time between sessions of work on a single task so as to avoid forgetting.&lt;/li&gt;
  &lt;li&gt;Remember that convenience ≠ productivity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And now some specific ways to put these principles into practice.&lt;/p&gt;

&lt;h3 id=&quot;use-meetings-well&quot;&gt;Use meetings well&lt;/h3&gt;

&lt;p&gt;Instant messages, e-mail, and interactions on doc comments are all asynchronous. Each message involves a context switch. Meetings are synchronous, rapid, concentrated communication. My rule of thumb: after the third message in an E-Mail or IM conversation, it’s better to switch to a meeting. An illustration of the cost of context switches that can be avoided by a meeting:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2024-06-09-attention-memory-productive-knowledge-work-side-by-side-653-0d3f63e19.png&quot; alt=&quot;two alternative ways to schedule work&quot; srcset=&quot;/generated/2024-06-09-attention-memory-productive-knowledge-work-side-by-side-400-e692b153f.webp 400w, /generated/2024-06-09-attention-memory-productive-knowledge-work-side-by-side-600-e692b153f.webp 600w, /generated/2024-06-09-attention-memory-productive-knowledge-work-side-by-side-653-e692b153f.webp 653w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Meetings certainly have their own costs, and are often run poorly, but producing fewer context switches is a huge and underappreciated advantage of meetings over asynchronous communication.&lt;/p&gt;

&lt;h4 id=&quot;meeting-tips&quot;&gt;Meeting tips&lt;/h4&gt;

&lt;p&gt;Regularly scheduled meetings are useful for regular, non-urgent communication. Participants know they’ll be able to discuss things relatively soon, and therefore can avoid resorting to asynchronous communication. Between meetings, participants can collect agenda items in a document as they arise. This is an example of convenience ≠ productivity. If I think of something to ask my coworker, it’s more convenient for me to IM him. But, if it’s not urgent, it’s more productive for me to write it the agenda of our next regularly scheduled meeting.&lt;/p&gt;

&lt;p&gt;For group meetings, it can be efficient to have a structured way for participants to schedule smaller-group follow-up meetings. When I was a manager at Microsoft, my team’s regular sync meetings were 60 minutes, but the whole team was only expected to meet for at most 30 minutes, and the rest of the hour was used for smaller group follow-up meetings. This avoids a context switch between blocks of meetings and blocks of solo wrk. And it avoids asynchronous back-and-forth to schedule a follow-up meeting.&lt;/p&gt;

&lt;p&gt;Finally, there are many ways meetings can be inefficient, but if participants are vigilant and vocal, they can be improved (or cancelled! Not all meetings are worthwhile).&lt;/p&gt;

&lt;h3 id=&quot;schedule-asynchronous-communication&quot;&gt;Schedule asynchronous communication&lt;/h3&gt;

&lt;p&gt;By default, don’t leave your inbox open, don’t leave your IM app open, and don’t leave your phone notifications on. Check these things on a schedule that balances responsiveness to others with your own ability to focus. Personally I follow a loose schedule of checking things first thing in the morning, immediately before meetings, and once or twice during the afternoon, when I happen to feel blocked or need a mental break.&lt;/p&gt;

&lt;p&gt;I used to have a problem with getting distracted by my inbox every time I sent an email. To send email without checking your inbox, you can use &lt;a href=&quot;https://mail.google.com/mail/?fs=1&amp;amp;tf=cm&quot;&gt;this link for GMail&lt;/a&gt; or &lt;a href=&quot;https://outlook.office365.com/mail/0/deeplink/compose&quot;&gt;this one for Outlook&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;schedule-focused-work&quot;&gt;Schedule focused work&lt;/h3&gt;

&lt;p&gt;One technique for avoiding self-imposed distraction is called “&lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Pomodoro&lt;/a&gt;”, which basically consists of setting a timer, and taking a break when the timer goes off.&lt;/p&gt;

&lt;p&gt;To increase the odds of having large blocks of time to focus, schedule events on your calendar that prevent others from scheduling meetings. If you have the option to work in a place that is quiet and physically isolated, try to do that during your scheduled focus blocks.&lt;/p&gt;

&lt;h3 id=&quot;limit-the-number-of-in-progress-tasks&quot;&gt;Limit the number of in-progress tasks&lt;/h3&gt;

&lt;p&gt;Limiting the number of tasks that you have in-progress can help reduce the temptation to context switch (and flush your working memory) and it will reduce the odds that you forget important details about one incomplete task while you’re working on another. This is a key feature of &lt;a href=&quot;https://en.wikipedia.org/wiki/Kanban_(development)&quot;&gt;Kanban&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrum_(software_development)&quot;&gt;Scrum&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-tools-to-disseminate-commonly-needed-information&quot;&gt;Use tools to disseminate commonly needed information&lt;/h3&gt;

&lt;p&gt;Some information is so commonly needed that the questions should be anticipated and built into tools that are used as part of the regular workflow. For example “Who is working on this task?” Proper use of an issue tracker (e.g., GitHub Issues, Asana) can answer this without the back-and-forth of asynchronous communication or the time burden of a meeting. If you find there is some question like this that is repeatedly asked, but has fairly formulaic answers, check if there’s a tool that you can adopt that will disseminate that information more efficiently.&lt;/p&gt;

&lt;h3 id=&quot;speed-up-testing-and-reviews&quot;&gt;Speed up testing and reviews&lt;/h3&gt;

&lt;p&gt;This is somewhat specific to software development, but it probably has analogs in other professions.&lt;/p&gt;

&lt;p&gt;The “testing and reviews” part of the software workflow typically looks like:&lt;/p&gt;

&lt;p&gt;While not approved:&lt;/p&gt;

&lt;p&gt;    Author: rebase, (read / think, write, build, run) until ready.&lt;/p&gt;

&lt;p&gt;    Wait for automatic checks.&lt;/p&gt;

&lt;p&gt;    Reviewer: read / think, comment. Maybe approve.&lt;/p&gt;

&lt;p&gt;This leaves plenty of room for context switching and forgetting:&lt;/p&gt;

&lt;p&gt;While not approved:&lt;/p&gt;

&lt;p&gt;    Wait for author to start.  &lt;b&gt;Author and reviewer forget.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;    Author: rebase, (read / think, write, build, run) until ready.  &lt;b&gt;Author context switch. Reviewer forgets.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;    Wait for max(automatic checks, reviewer to start).  &lt;b&gt;Author and reviewer context switch + forget.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;    Reviewer: read / think, comment. Maybe approve.  &lt;b&gt;Reviewer context switch.  Author forgets.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;What can we do about this? If automatic checks are frequently the bottleneck, spend time speeding them up. If code reviews are the bottleneck, speed those up. On a previous team I set up a duty rotation to review any changes that did not yet have a reviewer. You might also experiment with pair programming, which basically combines code review and programming.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements-and-further-reading&quot;&gt;Acknowledgements and further reading&lt;/h2&gt;

&lt;p&gt;Besides my own experience, this post is based on the following:&lt;/p&gt;

&lt;p&gt;A World Without Email by Cal Newport.&lt;/p&gt;

&lt;p&gt;Deep Work by Cal Newport.&lt;/p&gt;

&lt;p&gt;Getting Things Done by David Allen.&lt;/p&gt;

&lt;p&gt;More Effective Agile by Steve McConnell.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Ford_Model_T#Price_and_production &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A world without email, page 97. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Working_memory&quot;&gt;https://en.wikipedia.org/wiki/Working_memory&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Psychological_refractory_period &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Forgetting_curve &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Memory_hierarchy &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A world without email, page 11 &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>garymm</name></author><category term="work" /><category term="productivity" /><summary type="html">Here I present some ideas for increasing the productivity of knowledge workers by structuring their workflows around attention and memory. I wrote this for my own benefit, but I hope you find it useful too!</summary></entry><entry><title type="html">Why I considered IVF despite not having any fertility issues, and then decided against it</title><link href="http://garymm.org/blog/2024/03/10/why-i-considered-ivf/" rel="alternate" type="text/html" title="Why I considered IVF despite not having any fertility issues, and then decided against it" /><published>2024-03-10T00:00:00-08:00</published><updated>2024-03-10T00:00:00-08:00</updated><id>http://garymm.org/blog/2024/03/10/why-i-considered-ivf</id><content type="html" xml:base="http://garymm.org/blog/2024/03/10/why-i-considered-ivf/">&lt;p&gt;In &lt;a href=&quot;https://www.garymm.org/blog/2023/11/10/the-dangers-of-reproducing-while-old/&quot;&gt;The dangers of reproducing while old&lt;/a&gt;, I mentioned that pre-implantation genetic testing could be a way for older prospective parents to improve outcomes. This led my partner and I to seriously consider doing IVF despite not having any fertility issues. At a high level, my conclusion after writing that post was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Older parents are at much higher risk of passing harmful genetic mutations to their embryos.&lt;/li&gt;
  &lt;li&gt;IVF gives people the opportunity to screen for these harmful mutations, potentially avoiding miscarriage or serious health conditions later on. It also provides an opportunity to use polygenic screening to select for desirable traits.&lt;/li&gt;
  &lt;li&gt;There’s not much evidence that IVF results in worse health outcomes for children.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After investigating this more, I now think:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The benefit of polygenic screening is currently generally small, and in our case it would be tiny.&lt;/li&gt;
  &lt;li&gt;There’s some evidence of IVF producing worse health outcomes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;polygenic-screening&quot;&gt;Polygenic screening&lt;/h2&gt;

&lt;p&gt;I think polygenic screening&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; has a lot of potential, but currently it has serious limitations, including:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The models for certain traits like intelligence just aren’t very good at predicting. This is called the “missing heritability” problem, and it’s quite controversial exactly what’s going on, but some of the issues are clear. One is that current models are based on data that measured other things, like educational attainment, which are correlated with intelligence, but not perfectly (&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S0160289606000171&quot;&gt;e.g. Deary et. al find 0.81&lt;/a&gt;). And it’s partly because some of the variance in traits we care about is probably caused by very rare variants which would require huge sample sizes to detect.&lt;/li&gt;
  &lt;li&gt;The models are much better for people of certain ancestry than others, because of the data that they were created with. My impression is that the models currently work best for people of northern European ancestry.&lt;/li&gt;
  &lt;li&gt;The expected variance amongst embryos from the same parents is pretty low. To have good odds of finding an embryo that has polygenic scores much better than the average of its genetic siblings (i.e. the other embryos parents will be choosing amongst&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;), one needs a lot of embryos to choose from.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 1 should decrease the appeal of polygenic screening for everyone. Point 2 decreased it for me because my children would be mostly not-northern European. As for the number of embryos, my partner took a test that suggested a round of egg retrieval would yield relatively few eggs. This meant she’d probably have to undergo multiple rounds of egg retrieval, which is expensive and unpleasant.&lt;/p&gt;

&lt;p&gt;It’s hard to find good information on this topic. It’s not hard to find people saying that the technology doesn’t work, but I get the distinct whiff of motivated reasoning from articles like &lt;a href=&quot;https://liorpachter.wordpress.com/2021/04/12/the-amoral-nonsense-of-orchids-embryo-selection/&quot;&gt;this one by Lior Pachter&lt;/a&gt;. Basically I think the author thinks polygenic screening is morally wrong or disgusting, and therefore he’s finding reasons to say it won’t work.&lt;/p&gt;

&lt;p&gt;I want polygenic screening to work. If we were doing IVF anyways, I would definitely have the embryos polygenically screened.&lt;/p&gt;

&lt;h2 id=&quot;ivf-health-outcomes&quot;&gt;IVF health outcomes&lt;/h2&gt;

&lt;p&gt;I found the excellent paper &lt;a href=&quot;https://academic.oup.com/humupd/article/25/2/137/5316072?login=false&quot;&gt;The health of children conceived by ART: ‘the chicken or the egg?’&lt;/a&gt;, which looks at studies that try to control for the systematic differences between people who pursue IVF and those who don’t. That review, and newer studies such as &lt;a href=&quot;https://pubmed.ncbi.nlm.nih.gov/35934120/&quot;&gt;Sutclifffe (2023&lt;/a&gt;) did not find large differences in IVF babies later in life. But the best-controlled studies &lt;em&gt;do&lt;/em&gt; find a pretty large increased risk of preterm birth (relative risk somewhere in 1.5 - 2). &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5791955/&quot;&gt;Elsewhere&lt;/a&gt; I found the absolute risk of preterm birth for a 36 year old mother is about 6%, so IVF might take that up to 9-12%. Since preterm birth is associated with a lot of bad health conditions, it would be surprising if IVF children are more likely to be born preterm but are equally healthy later on.&lt;/p&gt;

&lt;p&gt;I’m wondering how it’s possible to reconcile the preterm birth and generally good outcomes in adults. Some possibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Preterm birth rates are not higher. The studies are just not controlling for something important.&lt;/li&gt;
  &lt;li&gt;Preterm birth caused by IVF is not associated with later bad health, but preterm birth caused by other things is.&lt;/li&gt;
  &lt;li&gt;There are negative impacts, but the studies of adults have missed them. Some possible reasons why: studies are too small, the negative health outcomes haven’t shown up yet because most IVF babies are too young, studies looked at the wrong metrics, there’s some selection bias such that the least healthy people are less likely to be studied (this one seems quite plausible to me).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My current guess is there’s a small but real tendency for people conceived via IVF to be less healthy later in life, though I’m extremely uncertain about the exact aspects of health, the magnitude and the frequency involved.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If you are not familiar with polygenic screening, I recommend &lt;a href=&quot;https://www.lesswrong.com/posts/yT22RcWrxZcXyGjsA/how-to-have-polygenically-screened-children&quot;&gt;Gene Smith’s post&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Unless you’re using donor gametes. In which case you might use multiple donors and compare across non-siblings. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>garymm</name></author><category term="parenting" /><category term="biology" /><category term="health" /><summary type="html">In The dangers of reproducing while old, I mentioned that pre-implantation genetic testing could be a way for older prospective parents to improve outcomes. This led my partner and I to seriously consider doing IVF despite not having any fertility issues. At a high level, my conclusion after writing that post was:</summary></entry><entry><title type="html">The dangers of reproducing while old</title><link href="http://garymm.org/blog/2023/11/10/the-dangers-of-reproducing-while-old/" rel="alternate" type="text/html" title="The dangers of reproducing while old" /><published>2023-11-10T00:00:00-08:00</published><updated>2023-11-10T00:00:00-08:00</updated><id>http://garymm.org/blog/2023/11/10/the-dangers-of-reproducing-while-old</id><content type="html" xml:base="http://garymm.org/blog/2023/11/10/the-dangers-of-reproducing-while-old/">&lt;p&gt;I had my first child when I was 36 years old, which made me want to understand the risks of having children at different ages. Before looking into this, my impression was that the main biological problems with old-age parenthood had to do with not having the necessary health and vigor to care for young’uns, and I had heard that older women have trouble getting pregnant. While those are real issues, there are many others worthy of consideration.&lt;/p&gt;

&lt;p&gt;My read of the evidence is that the risks of miscarriage and serious health problems for children, including autism and birth defects, increase significantly with parental (both paternal and maternal) age. The data I could find for most risks is not very fine-grained and not very precise, but I think this qualitative description matches the data: Risks start rising at around 30 years old for both mothers and fathers, rises gradually through about 35 for mothers and 40 for fathers, and then sharply after that.&lt;/p&gt;

&lt;p&gt;Interestingly, the ages at which things start to go wrong are similar for fathers and mothers, but the mechanisms are different. Sperm cells are produced throughout a man’s life, and each time a new cell is produced, there is a chance of a genetic mutation. Sperm are produced by copying the DNA of other short-lived cells, which are themselves produced in the same way, so mutations accumulate. Women’s egg cells, however, are all present when a woman is born, but over time they accumulate damage.&lt;/p&gt;

&lt;p&gt;If this is correct, then there are two ways to reduce these risks: have kids when young, or use frozen gametes from your younger selves. If you’re already in the danger zone and don’t have frozen gametes, pre-implantation genetic testing may be able to screen out embryos that have certain genetic defects, and thus reduce the risk of some bad outcomes.&lt;/p&gt;

&lt;p&gt;My advice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you want to have kids at some later age, and that later age is &amp;gt;= 35 for a woman or &amp;gt;= 40 for a man, freeze your gametes ASAP.&lt;/li&gt;
  &lt;li&gt;If you’re already past those age thresholds and you have the means, consider in-vitro fertilization so you can take advantage of pre-implantation genetic testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In “the dangers” section below I summarize some evidence on how parental age interacts with various risks. What’s not obvious is the relationship between the different risks. That is, are they mostly independent of each other, or is a child born with e.g., a heart defect much more likely to be autistic? They are not independent. For example, &lt;a href=&quot;https://www.nature.com/articles/pr2006181&quot;&gt;Eide et al.&lt;/a&gt; find a significant correlation between birth defects and intellectual disability. So if you want to know “what are the odds my kid comes out totally healthy”, I think just looking at the highest risk and ignoring the others is reasonable.&lt;/p&gt;

&lt;p&gt;If you’re interested in the details supporting the above conclusions, read on.&lt;/p&gt;

&lt;h2 id=&quot;technical-jargon&quot;&gt;Technical jargon&lt;/h2&gt;

&lt;p&gt;Skip this if you know these terms.&lt;/p&gt;

&lt;h3 id=&quot;prevalence&quot;&gt;Prevalence&lt;/h3&gt;

&lt;p&gt;The prevalence is what fraction of the population has the outcome of interest. Basically:&lt;/p&gt;

&lt;p&gt;(number of people with the outcome) / (number of people that were studied).&lt;/p&gt;

&lt;h3 id=&quot;odds-ratio&quot;&gt;Odds ratio&lt;/h3&gt;

&lt;p&gt;An odds ratio is a ratio of how likely the outcome of interest is in the condition of interest, to how likely it is in some reference condition. For the data below, the condition is always a particular parental age range, and the reference condition is some other age range that the researchers chose. For example, say we set the reference age to 25, and our outcome of interest is being born with green hair. If a study finds that children of fathers aged 30 have 1/10 odds of being born with green hair, and the children of fathers aged 25 have 1/100 odds of being born with green hair, then the odds ratio for age 30 is 1/10 / 1 / 100 = 10.&lt;/p&gt;

&lt;h3 id=&quot;95-ci&quot;&gt;95% CI&lt;/h3&gt;

&lt;p&gt;A 95% CI (confidence interval) is a range of values. Under certain assumptions&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; there is a 95% chance that the true value falls within that range.&lt;/p&gt;

&lt;h2 id=&quot;pre-implantation-genetic-testing&quot;&gt;Pre-implantation genetic testing&lt;/h2&gt;

&lt;p&gt;Pre-implantation genetic testing is done on embryos that have been fertilized in-vitro before implanting them into a woman (more details &lt;a href=&quot;https://www.lesswrong.com/posts/yT22RcWrxZcXyGjsA/how-to-have-polygenically-screened-children#But_how_do_they_even_get_an_embryo_s_DNA_&quot;&gt;here&lt;/a&gt;). After developing for about 10 days, embryos have enough cells that some can be removed for genetic testing. &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9674466/&quot;&gt;Sordia-Hernandez et al.&lt;/a&gt; look at the effects of testing for aneuploidy, which is a specific kind of genetic defect which often results in miscarriage or abortion. It finds significant benefits for women &amp;gt;= 35 years old, but not for younger women.&lt;/p&gt;

&lt;p&gt;Note that for almost everything else, the outcome being tested for is bad, whereas here it is live birth rate, or the odds of a child being born alive after an embryo is transferred into a woman.&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Mother’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Live birth rate odds ratio 95% CI (relative to no genetic testing)&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt; 35
   &lt;/td&gt;
   &lt;td&gt;0.56, 1.34
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 35
   &lt;/td&gt;
   &lt;td&gt;1.07, 2.84
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Very recently, some companies have started offering more in-depth genetic screening for embryos, such as assessing risk for polygenic traits, meaning influenced by many genes. The companies offering this service claim all sorts of benefits, such as reducing the risk of cancer and diabetes, but I don’t think it’s been independently evaluated, and it’s probably too new to truly evaluate, since there’s a very small number of people alive who were screened in this way. &lt;a href=&quot;https://www.lesswrong.com/posts/yT22RcWrxZcXyGjsA/how-to-have-polygenically-screened-children&quot;&gt;Here’s Gene Smith’s post&lt;/a&gt; that’s very enthusiastic about such screening and tells you how to go about it, and &lt;a href=&quot;https://www.lesswrong.com/posts/yT22RcWrxZcXyGjsA/how-to-have-polygenically-screened-children?commentId=uiFXXRpdXCzXjmfj8&quot;&gt;my response trying to summarize a skeptical position&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you’re older and you don’t have frozen gametes, should you do IVF just so you can do pre-implantation genetic testing?&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very effective at detecting aneuploidy, and thus increasing live birth rate per pregnancy.&lt;/li&gt;
  &lt;li&gt;You can choose the child’s sex.&lt;/li&gt;
  &lt;li&gt;If you opt for polygenic screening, it is possible to reduce other health risks and possibly improve other desirable traits like IQ. Again, see &lt;a href=&quot;https://www.lesswrong.com/posts/yT22RcWrxZcXyGjsA/how-to-have-polygenically-screened-children&quot;&gt;Gene Smith’s post&lt;/a&gt; for more details on this.&lt;/li&gt;
  &lt;li&gt;I haven’t seen any strong evidence that IVF results in worse health outcomes. Note there are many studies that show worse outcomes for IVF, but since IVF is largely used by people who have fertility problems, and differences seem to disappear entirely when controlling for this. &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3650450/&quot;&gt;More here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Expensive in time and money (maybe $25,000 in 2023).&lt;/li&gt;
  &lt;li&gt;Will be more expensive and / or less effective for women who produce fewer eggs per retrieval, which is mostly older women.&lt;/li&gt;
  &lt;li&gt;There is &lt;a href=&quot;https://academic.oup.com/humupd/article/25/2/137/5316072?login=false&quot;&gt;some evidence&lt;/a&gt; that IVF results in differences in the embryo that might possibly result in less healthy people (vs old-fashioned conception). I think the odds that this results in worse outcomes are quite low, but it’s worth mentioning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-dangers&quot;&gt;The dangers&lt;/h2&gt;

&lt;h3 id=&quot;miscarriage&quot;&gt;Miscarriage&lt;/h3&gt;

&lt;p&gt;This chart from &lt;a href=&quot;https://www.bmj.com/content/364/bmj.l869&quot;&gt;Magnus et al.&lt;/a&gt; shows the absolute risk by mother’s age. Y-axis is the proportion of pregnancies that end in miscarriage:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2023-11-10-the-dangers-of-reproducing-while-old/maternal-miscarriage-780-b27867d53.jpg&quot; alt=&quot;absolute risk of miscarriage by maternal age&quot; srcset=&quot;/generated/2023-11-10-the-dangers-of-reproducing-while-old/maternal-miscarriage-400-902027773.webp 400w, /generated/2023-11-10-the-dangers-of-reproducing-while-old/maternal-miscarriage-600-902027773.webp 600w, /generated/2023-11-10-the-dangers-of-reproducing-while-old/maternal-miscarriage-780-902027773.webp 780w&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here’s some data from &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7456349/&quot;&gt;du Fossé et al.&lt;/a&gt; on the risk by father’s age. For the absolute risk, I assumed the absolute risk for the reference age is 10%, which seems to be about the value for a 27 year old woman from the chart above.&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Father’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Absolute risk 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;25-29
   &lt;/td&gt;
   &lt;td&gt;reference
   &lt;/td&gt;
   &lt;td&gt;10%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;30-34
   &lt;/td&gt;
   &lt;td&gt;0.9, 1.21
   &lt;/td&gt;
   &lt;td&gt;9%, 12.1%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;35-39
   &lt;/td&gt;
   &lt;td&gt;0.92, 1.43
   &lt;/td&gt;
   &lt;td&gt;9.2%, 14.3%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;40-44
   &lt;/td&gt;
   &lt;td&gt;1.06, 1.43
   &lt;/td&gt;
   &lt;td&gt;10.6%, 14.3%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 45
   &lt;/td&gt;
   &lt;td&gt;1.13, 1.81
   &lt;/td&gt;
   &lt;td&gt;11.3%, 18.1%
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&quot;autism&quot;&gt;Autism&lt;/h3&gt;

&lt;h4 id=&quot;prevalence-1&quot;&gt;Prevalence&lt;/h4&gt;

&lt;p&gt;People with a huge range of abilities and tendencies are all diagnosed with autism, and there’s a lot of debate about the accuracy of many diagnoses. However “profound autism” is a diagnosis with much clearer criteria. &lt;a href=&quot;https://www.researchgate.net/publication/370128310_The_Prevalence_and_Characteristics_of_Children_With_Profound_Autism_15_Sites_United_States_2000-2016&quot;&gt;Hughes et al.&lt;/a&gt; defined profound autism “as children with autism who were either nonverbal or minimally verbal or had an (intelligence quotient) IQ &amp;lt;50”. That study estimated the prevalence of profound autism in the USA as:&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;Female
   &lt;/td&gt;
   &lt;td&gt;1.88 / 1000 = 1 / 532
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Male
   &lt;/td&gt;
   &lt;td&gt;7.18 / 1000 = 1 / 139
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Overall
   &lt;/td&gt;
   &lt;td&gt;4.59 / 1000 = 1 / 218
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;These numbers seem shockingly high, but they do somewhat match my casual observations. I don’t know a lot of children, but I know of at least 2 profoundly autistic boys.&lt;/p&gt;

&lt;h4 id=&quot;risk-by-parental-age&quot;&gt;Risk by parental age&lt;/h4&gt;

&lt;p&gt;The studies I found on the impact of parental age did not restrict themselves to just profound autism, so it’s possible that parental age interacts with profound autism differently, but my guess is it’s at least qualitatively correct.&lt;/p&gt;

&lt;p&gt;Here are the results from &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2638544/&quot;&gt;Durkin et al.&lt;/a&gt;, who looked at both the father’s and mother’s ages. For the absolute risk for fathers, I used the number of autism spectrum disorder cases / size of the “Birth Chort Comparison Group” for the father’s or mother’s reference age, extracted from table 3 of the paper. For fathers that’s 322 / 67,080 = 0.48%. For mother’s that’s 366 / 75,053 = 0.49%. These numbers are close to the overall risk of profound autism from Hughes et al. above, but this study considered any autism diagnosis, so something is probably wrong either with my calculation or with one or both of these studies.&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Father’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Absolute risk 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt;20
   &lt;/td&gt;
   &lt;td&gt;0.4, 1.0
   &lt;/td&gt;
   &lt;td&gt;0.19%, 0.48%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;20-24
   &lt;/td&gt;
   &lt;td&gt;0.7, 1.1
   &lt;/td&gt;
   &lt;td&gt;0.34%, 0.53%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;25-29
   &lt;/td&gt;
   &lt;td&gt;Reference
   &lt;/td&gt;
   &lt;td&gt;0.48%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;30-34
   &lt;/td&gt;
   &lt;td&gt;0.9, 1.2
   &lt;/td&gt;
   &lt;td&gt;0.43%, 0.58%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;35-39
   &lt;/td&gt;
   &lt;td&gt;0.9, 1.3
   &lt;/td&gt;
   &lt;td&gt;0.43%, 0.62%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 40
   &lt;/td&gt;
   &lt;td&gt;1.1, 1.8
   &lt;/td&gt;
   &lt;td&gt;0.53%, 0.86%
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Mother’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Absolute risk 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt;20
   &lt;/td&gt;
   &lt;td&gt;0.5, 1.0
   &lt;/td&gt;
   &lt;td&gt;0.25%, 0.49%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;20-24
   &lt;/td&gt;
   &lt;td&gt;0.8, 1.1
   &lt;/td&gt;
   &lt;td&gt;0.39%, 0.54%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;25-29
   &lt;/td&gt;
   &lt;td&gt;Reference
   &lt;/td&gt;
   &lt;td&gt;0.49%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;30-34
   &lt;/td&gt;
   &lt;td&gt;0.9, 1.3
   &lt;/td&gt;
   &lt;td&gt;0.44%, 0.64%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 35
   &lt;/td&gt;
   &lt;td&gt;1.1, 1.6
   &lt;/td&gt;
   &lt;td&gt;0.54%, 0.64%
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Note from paper: “Because the increased risk was similar for ages 35–39 and ≥40 years, the high-risk maternal age category was defined as ≥35 years.”&lt;/p&gt;

&lt;p&gt;And here are results from &lt;a href=&quot;https://doi.org/10.1038/mp.2010.121&quot;&gt;another study&lt;/a&gt; that looked only at the father’s age:&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Father’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;15-29
   &lt;/td&gt;
   &lt;td&gt;Reference
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;30-39
   &lt;/td&gt;
   &lt;td&gt;1.0, 1.42
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;40-49
   &lt;/td&gt;
   &lt;td&gt;1.07, 1.87
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 50
   &lt;/td&gt;
   &lt;td&gt;1.26, 3.88
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This chart shows absolute risks from that same study:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wrap&quot; src=&quot;/generated/2023-11-10-the-dangers-of-reproducing-while-old/paternal-autism-571-ad78da241.png&quot; alt=&quot;absolute risk of autism by paternal age&quot; srcset=&quot;/generated/2023-11-10-the-dangers-of-reproducing-while-old/paternal-autism-400-5c21b43d3.webp 400w, /generated/2023-11-10-the-dangers-of-reproducing-while-old/paternal-autism-571-5c21b43d3.webp 571w&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;chromosome-disorders&quot;&gt;Chromosome disorders&lt;/h3&gt;

&lt;h4 id=&quot;prevalence-2&quot;&gt;Prevalence&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://pubmed.ncbi.nlm.nih.gov/9934980/&quot;&gt;Caron, Tihy, and Dallaire&lt;/a&gt; find that of mothers aged &amp;gt;= 35,  1.79% or 1 / 55 have a chromosomal disorder in the second trimester. Note that some chromosome disorders result in miscarriage earlier than that, so the true prevalence is certainly higher.&lt;/p&gt;

&lt;h4 id=&quot;risk-by-parental-age-1&quot;&gt;Risk by parental age&lt;/h4&gt;

&lt;p&gt;To compute absolute risk, I took the prevalence number from above and then divided it by 5.66 (the middle of the odds ratio CI for mothers aged &amp;gt;= 35) to get 1.79 % / 5.66 = 0.32%.&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Father’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Absolute risk 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt;20
   &lt;/td&gt;
   &lt;td&gt;1.01, 1.89
   &lt;/td&gt;
   &lt;td&gt;0.32%, 0.60%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;25-29
   &lt;/td&gt;
   &lt;td&gt;reference
   &lt;/td&gt;
   &lt;td&gt;0.32%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 40
   &lt;/td&gt;
   &lt;td&gt;1.12, 1.52
   &lt;/td&gt;
   &lt;td&gt;0.36%, 0.49%
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7803514/&quot;&gt;Fang et al.&lt;/a&gt;&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Mother’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Absolute risk 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt;20
   &lt;/td&gt;
   &lt;td&gt;0.54, 0.88
   &lt;/td&gt;
   &lt;td&gt;0.17%,	0.28%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;20-34
   &lt;/td&gt;
   &lt;td&gt;reference
   &lt;/td&gt;
   &lt;td&gt;0.32%
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 35
   &lt;/td&gt;
   &lt;td&gt;5.13, 6.2
   &lt;/td&gt;
   &lt;td&gt;1.64%,	1.98%
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;From &lt;a href=&quot;https://obgyn.onlinelibrary.wiley.com/doi/10.1111/aogs.14339&quot;&gt;Ahn et al.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;urogenital-defects&quot;&gt;Urogenital defects&lt;/h3&gt;

&lt;h4 id=&quot;prevalence-3&quot;&gt;Prevalence&lt;/h4&gt;

&lt;p&gt;1.60 / 1000 = 1 / 625. &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6472003/&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;risk-by-parental-age-2&quot;&gt;Risk by parental age&lt;/h4&gt;

&lt;p&gt;I didn’t find an easy way to calculate absolute risk.&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Father’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt;20
   &lt;/td&gt;
   &lt;td&gt;1.03, 2.19
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;25-29
   &lt;/td&gt;
   &lt;td&gt;reference
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 40
   &lt;/td&gt;
   &lt;td&gt;1.07, 1.52
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7803514/&quot;&gt;Fang et al.&lt;/a&gt;&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Mother’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;20-34
   &lt;/td&gt;
   &lt;td&gt;reference
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 35
   &lt;/td&gt;
   &lt;td&gt;1.13, 1.89
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;From &lt;a href=&quot;https://obgyn.onlinelibrary.wiley.com/doi/10.1111/aogs.14339&quot;&gt;Ahn et al.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;heart-defects&quot;&gt;Heart defects&lt;/h3&gt;

&lt;h4 id=&quot;prevalence-4&quot;&gt;Prevalence&lt;/h4&gt;

&lt;p&gt;137.1 / 10,000 = 1 / 73. &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0002870314004980&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: this seems really high to me. Maybe most of these are not very serious, or maybe I know people who were born with heart defects but I don’t know they have them.&lt;/p&gt;

&lt;h4 id=&quot;risk-by-parental-age-3&quot;&gt;Risk by parental age&lt;/h4&gt;

&lt;p&gt;I didn’t find an easy way to calculate absolute risk.&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Father’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt;20
   &lt;/td&gt;
   &lt;td&gt;0.96, 1.16
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;25-29
   &lt;/td&gt;
   &lt;td&gt;reference
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 40
   &lt;/td&gt;
   &lt;td&gt;1.01, 1.2
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;From &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7803514/&quot;&gt;Fang et al.&lt;/a&gt;&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Mother’s age&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Odds ratio 95% CI&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;lt;20
   &lt;/td&gt;
   &lt;td&gt;0.79, 1.1
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;20-34
   &lt;/td&gt;
   &lt;td&gt;reference
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&amp;gt;= 35
   &lt;/td&gt;
   &lt;td&gt;1.06, 1.24
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;From &lt;a href=&quot;https://obgyn.onlinelibrary.wiley.com/doi/10.1111/aogs.14339&quot;&gt;Ahn et al.&lt;/a&gt;&lt;/p&gt;

&lt;!-- Footnotes themselves at the bottom. --&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;Which scientists sometimes violate and thus invalidate their own results, but for now I’m just assuming these stats are sound. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>garymm</name></author><category term="parenting" /><category term="biology" /><category term="health" /><summary type="html">I had my first child when I was 36 years old, which made me want to understand the risks of having children at different ages. Before looking into this, my impression was that the main biological problems with old-age parenthood had to do with not having the necessary health and vigor to care for young’uns, and I had heard that older women have trouble getting pregnant. While those are real issues, there are many others worthy of consideration.</summary></entry><entry><title type="html">Multi-language integration testing made easy with Bazel</title><link href="http://garymm.org/blog/2023/10/09/multi-language-integration-testing-made-easy-with-bazel/" rel="alternate" type="text/html" title="Multi-language integration testing made easy with Bazel" /><published>2023-10-09T00:00:00-07:00</published><updated>2023-10-09T00:00:00-07:00</updated><id>http://garymm.org/blog/2023/10/09/multi-language-integration-testing-made-easy-with-bazel</id><content type="html" xml:base="http://garymm.org/blog/2023/10/09/multi-language-integration-testing-made-easy-with-bazel/">&lt;p&gt;When developing mlflow-go, a Go client for MLFlow, I realized integration testing was crucial to ensure correctness. Since the official MLFlow server and client are written in Python, such an integration test would involve multiple languages. Bazel made it easy to set up and automate a multi-language test.&lt;/p&gt;

&lt;p&gt;Bazel is a build tool and test runner. There’s lots to love about Bazel, but in this case the useful things are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It supports many programming languages.&lt;/li&gt;
  &lt;li&gt;Its “data” and “runfiles” features enable one Bazel target to access other build outputs at run-time.&lt;/li&gt;
  &lt;li&gt;It can automatically download all needed language compilers / runtimes and external dependencies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To understand why I wanted an integration test, I need to explain a little about the system under test. The client logs to and reads from a local file system. In a unit test, I can assert that the client is able to write and read back what it wrote, but I can’t assert that the files are in a format that the official MLFlow code will understand, since there is no specification of the file format. The fact that I can read my own handwriting is pretty useless if I’m writing you a letter and you can’t read it. A test that uses both the Go and Python client libraries can enforce compatibility.&lt;/p&gt;

&lt;p&gt;Here’s pseudo-code&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; for the test I ended up writing:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for client_binary in (go, py):
  temp_dir := make_temp_dir()
  run client binary in a subprocess, pointing it to write to temp_dir
  use official MLFlow client library to read from temp_dir
  assert we read what we expect to read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The test is declared in a BUILD.bazel file&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Let’s walk through what’s in it. First we declare the binaries that write to MLFlow, using the Go and Python client libraries:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# go binary that uses our go client
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;go_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;go&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;srcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main.go&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//:mlflow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# python binary that uses the official client
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;srcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;main.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@pip//mlflow:pkg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we declare the test, which depends on the above binaries as data:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;py_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;conformance_test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;srcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;conformance_test.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;:go&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;:py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;@pip//mlflow:pkg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;@rules_python//python/runfiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; field in the conformance_test target means bazel will build those targets when it builds the test, and the test can access them at run-time. To access them, we use Bazel’s runfiles module. In my conformance_test, to access the “py” target I would write:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;python.runfiles.runfiles&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# converts relative path to absolute path
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rlocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conformance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately the documentation for runfiles in Bazel is currently pretty bad (as it is for many topics), but the basic workflow is:
Add the target for what you want to access at runtime (which can be a built binary, in this case our “py” and “go” targets) to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; field of the accessor’s target declaration (in this case the “conformance_test”).
In the accessor’s code (in this case conformance_test.py), use a Bazel runfiles library to access the file.&lt;/p&gt;

&lt;p&gt;Typically the “rules_&amp;lt;lang&amp;gt;” module that provides Bazel support for a given language includes a library to access runfiles. The one I used in my python test is “@rules_python//python/runfiles”.&lt;/p&gt;

&lt;p&gt;Above I mentioned Bazel’s dependency management. In this case, the only thing a user needs to install is bazel. Then when the user runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bazel test //conformance:conformance_test&lt;/code&gt;, bazel will:
Download a specific version of the Go toolchain (compiler and linker)
Download a specific version of the Python interpreter
Download all external Go and Python dependencies
Use the above to build the needed targets
Runs the test&lt;/p&gt;

&lt;p&gt;And this works on Linux, macOS, and Windows.&lt;/p&gt;

&lt;p&gt;There you have it. Let me know if you find this useful.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/Astera-org/mlflow-go/blob/master/conformance/conformance_test.py&quot;&gt;Latest full source&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Slightly modified from the real thing for clarity, &lt;a href=&quot;https://github.com/Astera-org/mlflow-go/blob/master/conformance/BUILD.bazel&quot;&gt;latest full source here&lt;/a&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>garymm</name></author><category term="programming" /><category term="bazel" /><summary type="html">When developing mlflow-go, a Go client for MLFlow, I realized integration testing was crucial to ensure correctness. Since the official MLFlow server and client are written in Python, such an integration test would involve multiple languages. Bazel made it easy to set up and automate a multi-language test.</summary></entry></feed>